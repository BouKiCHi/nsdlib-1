ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : crt0.s
Current file: crt0.s

000000r 1               ;=======================================================================
000000r 1               ;
000000r 1               ;	NSF ROM code for NSD.Lib
000000r 1               ;
000000r 1               ;				Programmed by A.Watanabe
000000r 1               ;
000000r 1               ;=======================================================================
000000r 1               
000000r 1               ;-------------------------------
000000r 1               ;Memory Map of this NSF program code
000000r 1               ;-------------------------------
000000r 1               ;Address	Type	Contents
000000r 1               ;0x8000		BYTE	BGM数
000000r 1               ;0x8001		BYTE	SE数
000000r 1               ;0x8002		WORD	⊿PCM構造体のポインタ
000000r 1               ;0x8004-	WORD	BGM､SEデータのポインタ
000000r 1               ;～～			BGM,SE,エンベロープ、音色データ ＆ ⊿PCM構造体
000000r 1               ;0xC000-		⊿PCM実体
000000r 1               ;0xE000-		プログラムコード
000000r 1               ;
000000r 1               ;	NSF Headerは、MMLコンパイラが作る。
000000r 1               ;
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; Define for C Langage
000000r 1               ; ------------------------------------------------------------------------
000000r 1               
000000r 1               ;	.export		_exit
000000r 1               	.export		__STARTUP__ : absolute = 1      ; Mark as startup
000000r 1               ;	.import		initlib, donelib, callmain
000000r 1               ;	.import		push0, _main, zerobss, copydata
000000r 1               ;	.import		ppubuf_flush
000000r 1               
000000r 1               	; Linker generated symbols
000000r 1               	.import		__RAM_START__, __RAM_SIZE__
000000r 1               	.import		__SRAM_START__, __SRAM_SIZE__
000000r 1               	.import		__ROM0_START__, __ROM0_SIZE__, __ROM0_LAST__
000000r 1               	.import		__STARTUP_LOAD__,__STARTUP_RUN__, __STARTUP_SIZE__
000000r 1               	.import		__CODE_LOAD__,__CODE_RUN__, __CODE_SIZE__
000000r 1               	.import		__RODATA_LOAD__,__RODATA_RUN__, __RODATA_SIZE__
000000r 1               
000000r 1               ;	.include	"zeropage.inc"
000000r 1               ;	.include	"nes.inc"
000000r 1               
000000r 1               	.include	"..\..\include\nsd.inc"
000000r 2               ;=======================================================================|
000000r 2               ;									|
000000r 2               ;		NES Sound Driver & library				|
000000r 2               ;				define file				|
000000r 2               ;					for Assemble Language (ca65)	|
000000r 2               ;									|
000000r 2               ;					Programmed by			|
000000r 2               ;						A.Watanabe		|
000000r 2               ;									|
000000r 2               ;=======================================================================|
000000r 2               
000000r 2               ;****************************************************************
000000r 2               ;*		Struct of DPCM					*
000000r 2               ;****************************************************************
000000r 2               .Struct		nsd_dpcm
000000r 2               	Control		.byte		;I/O 0x4010
000000r 2               	DA		.byte		;I/O 0x4011
000000r 2               	Address		.byte		;I/O 0x4012
000000r 2               	Size		.byte		;I/O 0x4013
000000r 2               .Endstruct
000000r 2               
000000r 2               
000000r 2               
000000r 2               ;****************************************************************
000000r 2               ;*		Function of Library				*
000000r 2               ;****************************************************************
000000r 2               ;-----------------------------------------------
000000r 2               ;	void	__fastcall__	nsd_main(void);
000000r 2               ;-----------------------------------------------
000000r 2               ;	Summary :		main routine of this sound driver
000000r 2               ;	Arguments :		None
000000r 2               ;	Return :		None
000000r 2               ;	Modifies :		A X Y
000000r 2               ;	Useage :		Call by 60[Hz].  e.g. V-Blank
000000r 2               ;-----------------------------------------------
000000r 2               	.import		_nsd_main
000000r 2               
000000r 2               
000000r 2               ;-----------------------------------------------
000000r 2               ;	void	__fastcall__	nsd_init(void);
000000r 2               ;-----------------------------------------------
000000r 2               ;	Summary :		Initraize this sound driver.
000000r 2               ;	Arguments :		None
000000r 2               ;	Return :		None
000000r 2               ;	Modifies :		A X Y
000000r 2               ;	Useage :		Call when start up.
000000r 2               ;-----------------------------------------------
000000r 2               	.import		_nsd_init
000000r 2               
000000r 2               
000000r 2               ;-----------------------------------------------
000000r 2               ;	void	__fastcall__	nsd_set_dpcm(nsd_dpcm* dpcm);
000000r 2               ;-----------------------------------------------
000000r 2               ;	Summary :		Set the Delta PCM information.
000000r 2               ;	Arguments :	AX	Pointer of the Delta PCM information.
000000r 2               ;	Return :		None
000000r 2               ;	Modifies :		A X Y
000000r 2               ;-----------------------------------------------
000000r 2               	.import		_nsd_set_dpcm
000000r 2               
000000r 2               
000000r 2               ;-----------------------------------------------
000000r 2               ;	void	__fastcall__	nsd_play_bgm(void* ptr);
000000r 2               ;-----------------------------------------------
000000r 2               ;	Summary :		Play the BGM
000000r 2               ;	Arguments :	AX	Pointer of the BGM data.
000000r 2               ;	Return :		None
000000r 2               ;	Modifies :		A X Y
000000r 2               ;-----------------------------------------------
000000r 2               	.import		_nsd_play_bgm
000000r 2               
000000r 2               
000000r 2               ;-----------------------------------------------
000000r 2               ;	void	__fastcall__	nsd_stop_bgm(void);
000000r 2               ;-----------------------------------------------
000000r 2               ;	Summary :		Stop the BGM
000000r 2               ;	Arguments :		None
000000r 2               ;	Return :		None
000000r 2               ;	Modifies :		A X Y
000000r 2               ;-----------------------------------------------
000000r 2               	.import		_nsd_stop_bgm
000000r 2               
000000r 2               
000000r 2               ;-----------------------------------------------
000000r 2               ;	void	__fastcall__	nsd_play_se(void* ptr);
000000r 2               ;-----------------------------------------------
000000r 2               ;	Summary :		Play the SE
000000r 2               ;	Arguments :	AX	Pointer of the SE data.
000000r 2               ;	Return :		None
000000r 2               ;	Modifies :		A X Y
000000r 2               ;-----------------------------------------------
000000r 2               	.import		_nsd_play_se
000000r 2               
000000r 2               
000000r 2               ;-----------------------------------------------
000000r 2               ;	void	__fastcall__	nsd_stop_se(void);
000000r 2               ;-----------------------------------------------
000000r 2               ;	Summary :		Stop the SE
000000r 2               ;	Arguments :		None
000000r 2               ;	Return :		None
000000r 2               ;	Modifies :		A X Y
000000r 2               ;-----------------------------------------------
000000r 2               	.import		_nsd_stop_se
000000r 2               
000000r 2               
000000r 2               ;****************************************************************
000000r 2               
000000r 1               
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; 変数
000000r 1               ; ------------------------------------------------------------------------
000000r 1               .zeropage
000000r 1               
000000r 1  00 00        _ptr:	.word	0
000002r 1  00 00        _tmp:	.word	0
000004r 1               
000004r 1               
000004r 1               
000004r 1               .bss
000000r 1               
000000r 1  00           _eff:	.byte	0		;SE start number
000001r 1               
000001r 1               ; ------------------------------------------------------------------------
000001r 1               ; 16 bytes INES header
000001r 1               ; ------------------------------------------------------------------------
000001r 1               
000001r 1               .segment	"HEADER"
000000r 1               
000000r 1  4E 45 53 4D  	.byte	$4E,$45,$53,$4D,$1A	;00	"NESM",0x1A
000004r 1  1A           
000005r 1  01           	.byte	1			;05	Version
000006r 1  00           	.byte	0			;06	Music number
000007r 1  01           	.byte	1			;07	Start Music number
000008r 1  00 80        	.addr	$8000			;08	Load address
00000Ar 1  rr rr        	.addr	_nsf_init		;0A	Init routine address
00000Cr 1  rr rr        	.addr	_nsf_main		;0C	Sound driver main routine address
00000Er 1  00 00 00 00  	.res	32,	$0
000012r 1  00 00 00 00  
000016r 1  00 00 00 00  
00001Ar 1  00 00 00 00  
00001Er 1  00 00 00 00  
000022r 1  00 00 00 00  
000026r 1  00 00 00 00  
00002Ar 1  00 00 00 00  
00002Er 1  00 00 00 00  	.res	32,	$0
000032r 1  00 00 00 00  
000036r 1  00 00 00 00  
00003Ar 1  00 00 00 00  
00003Er 1  00 00 00 00  
000042r 1  00 00 00 00  
000046r 1  00 00 00 00  
00004Ar 1  00 00 00 00  
00004Er 1  00 00 00 00  	.res	32,	$0
000052r 1  00 00 00 00  
000056r 1  00 00 00 00  
00005Ar 1  00 00 00 00  
00005Er 1  00 00 00 00  
000062r 1  00 00 00 00  
000066r 1  00 00 00 00  
00006Ar 1  00 00 00 00  
00006Er 1  1A 41        	.word	$411A			;6E	60Hz
000070r 1  00 00 00 00  	.byte	0,0,0,0,0,0,0,0		;70	bank
000074r 1  00 00 00 00  
000078r 1  20 4E        	.word	$4E20
00007Ar 1  00 00 00 00  	.byte	0,0,0,0,0,0		;78
00007Er 1  00 00        
000080r 1               
000080r 1               ; ------------------------------------------------------------------------
000080r 1               ;
000080r 1               ; ------------------------------------------------------------------------
000080r 1               .segment	"STARTUP"
000000r 1               
000000r 1               .proc	_nsf_main
000000r 1               
000000r 1  20 rr rr     	jsr	_nsd_main
000003r 1               
000003r 1  60           	rts
000004r 1               .endproc
000004r 1               
000004r 1               ; ------------------------------------------------------------------------
000004r 1               ;
000004r 1               ; ------------------------------------------------------------------------
000004r 1               .proc	_nsf_init
000004r 1  48           	pha
000005r 1               
000005r 1  20 rr rr     	jsr	_zero_mem
000008r 1               
000008r 1  20 rr rr     	jsr	_init
00000Br 1               
00000Br 1  68           	pla
00000Cr 1  20 rr rr     	jsr	_play_music
00000Fr 1               
00000Fr 1  60           	rts
000010r 1               .endproc
000010r 1               
000010r 1               ; ------------------------------------------------------------------------
000010r 1               ;
000010r 1               ; ------------------------------------------------------------------------
000010r 1               .proc	_zero_mem
000010r 1  A9 00        	lda	#0
000012r 1  A2 00        	ldx	#0
000014r 1               
000014r 1               @L:
000014r 1  95 00        	sta	$0000,x	;Stackはクリアしない。
000016r 1  9D 00 02     	sta	$0200,x
000019r 1  9D 00 03     	sta	$0300,x
00001Cr 1  9D 00 04     	sta	$0400,x
00001Fr 1  9D 00 05     	sta	$0500,x
000022r 1  9D 00 06     	sta	$0600,x
000025r 1  9D 00 07     	sta	$0700,x
000028r 1               
000028r 1               ;	使っていないので、クリアしない。
000028r 1               ;	sta	$6000,x
000028r 1               ;	sta	$6100,x
000028r 1               ;	sta	$6200,x
000028r 1               ;	sta	$6300,x
000028r 1               ;	sta	$6400,x
000028r 1               ;	sta	$6500,x
000028r 1               ;	sta	$6600,x
000028r 1               ;	sta	$6700,x
000028r 1               ;	sta	$6800,x
000028r 1               ;	sta	$6900,x
000028r 1               ;	sta	$6A00,x
000028r 1               ;	sta	$6B00,x
000028r 1               ;	sta	$6C00,x
000028r 1               ;	sta	$6D00,x
000028r 1               ;	sta	$6E00,x
000028r 1               ;	sta	$6F00,x
000028r 1               ;	sta	$7000,x
000028r 1               ;	sta	$7100,x
000028r 1               ;	sta	$7200,x
000028r 1               ;	sta	$7300,x
000028r 1               ;	sta	$7400,x
000028r 1               ;	sta	$7500,x
000028r 1               ;	sta	$7600,x
000028r 1               ;	sta	$7700,x
000028r 1               ;	sta	$7800,x
000028r 1               ;	sta	$7900,x
000028r 1               ;	sta	$7A00,x
000028r 1               ;	sta	$7B00,x
000028r 1               ;	sta	$7C00,x
000028r 1               ;	sta	$7D00,x
000028r 1               ;	sta	$7E00,x
000028r 1               ;	sta	$7F00,x
000028r 1  E8           	inx
000029r 1  D0 E9        	bne	@L
00002Br 1               
00002Br 1  60           	rts
00002Cr 1               .endproc
00002Cr 1               
00002Cr 1               ; ------------------------------------------------------------------------
00002Cr 1               ;
00002Cr 1               ; ------------------------------------------------------------------------
00002Cr 1               .proc	_init
00002Cr 1               
00002Cr 1  20 rr rr     	jsr	_nsd_init
00002Fr 1               
00002Fr 1  A9 rr        	lda	#<(__ROM0_LAST__)
000031r 1  85 rr        	sta	_ptr
000033r 1  A9 rr        	lda	#>(__ROM0_LAST__)
000035r 1  85 rr        	sta	_ptr+1		;_ptr = __ROM0_START__
000037r 1               
000037r 1  A0 00        	ldy	#0
000039r 1  B1 rr        	lda	(_ptr),y
00003Br 1  C8           	iny			;ax = BGM and SE's qty
00003Cr 1  8D rr rr     	sta	_eff
00003Fr 1               
00003Fr 1  B1 rr        	lda	(_ptr),y
000041r 1  C8           	iny
000042r 1  85 rr        	sta	_tmp
000044r 1  B1 rr        	lda	(_ptr),y
000046r 1  AA           	tax			;ax = Pointer of ⊿PCM infomation Struct
000047r 1  A5 rr        	lda	_tmp
000049r 1  20 rr rr     	jsr	_nsd_set_dpcm
00004Cr 1               
00004Cr 1  60           	rts
00004Dr 1               .endproc
00004Dr 1               
00004Dr 1               ; ------------------------------------------------------------------------
00004Dr 1               ;
00004Dr 1               ; ------------------------------------------------------------------------
00004Dr 1               .proc	_play_music
00004Dr 1               
00004Dr 1  48           	pha
00004Er 1  A9 rr        	lda	#<(__ROM0_LAST__)
000050r 1  85 rr        	sta	_ptr
000052r 1  A9 rr        	lda	#>(__ROM0_LAST__)
000054r 1  85 rr        	sta	_ptr+1		;_ptr = __ROM0_START__
000056r 1  68           	pla
000057r 1               
000057r 1  CD rr rr     	cmp	_eff
00005Ar 1  08           	php
00005Br 1  18           	clc
00005Cr 1  69 02        	adc	#2
00005Er 1  0A           	asl	a
00005Fr 1  A8           	tay			; y = _mus * 2
000060r 1  B1 rr        	lda	(_ptr),y
000062r 1  85 rr        	sta	_tmp
000064r 1  C8           	iny
000065r 1  B1 rr        	lda	(_ptr),y	; ax = Pointer of BGM/SE
000067r 1  AA           	tax
000068r 1  A5 rr        	lda	_tmp
00006Ar 1  28           	plp
00006Br 1               
00006Br 1  B0 03        	bcs	@L
00006Dr 1  4C rr rr     	jmp	_nsd_play_bgm
000070r 1  4C rr rr     @L:	jmp	_nsd_play_se
000073r 1               .endproc
000073r 1               
000073r 1               
000073r 1               ; ------------------------------------------------------------------------
000073r 1               ; hardware vectors
000073r 1               ; ------------------------------------------------------------------------
000073r 1               
000073r 1               ;.segment	"COPYRIGHT"
000073r 1               ;	.asciiz	"(c) 2012 S.W."
000073r 1               ;
000073r 1               ;.segment	"VECTORS"
000073r 1               ;	.word	_nsf_init	; $fff0		MMLコンパイラが参照して、NSFヘッダーに埋め込む。
000073r 1               ;	.word	_nsf_main	; $fff2		MMLコンパイラが参照して、NSFヘッダーに埋め込む。
000073r 1               ;	.word	irq2		; $fff4 ?
000073r 1               ;	.word	irq1		; $fff6 ?
000073r 1               ;	.word	timerirq	; $fff8 ?
000073r 1               ;	.word	nmi		; $fffa vblank nmi
000073r 1               ;	.word	start		; $fffc reset
000073r 1               ;	.word	irq		; $fffe irq / brk
000073r 1               ;
000073r 1               
