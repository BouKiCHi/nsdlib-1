ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : crt0.s
Current file: crt0.s

000000r 1               ;=======================================================================
000000r 1               ;
000000r 1               ;	NSF ROM code for NSD.Lib
000000r 1               ;
000000r 1               ;				Programmed by A.Watanabe
000000r 1               ;
000000r 1               ;=======================================================================
000000r 1               
000000r 1               ;-------------------------------
000000r 1               ;Memory Map of this NSF program code
000000r 1               ;-------------------------------
000000r 1               ;Address	Type	Contents
000000r 1               ;0x8000		BYTE	BGM数
000000r 1               ;0x8001		BYTE	SE数
000000r 1               ;0x8002		WORD	⊿PCM構造体のポインタ
000000r 1               ;0x8004-	WORD	BGM､SEデータのポインタ
000000r 1               ;～～			BGM,SE,エンベロープ、音色データ ＆ ⊿PCM構造体
000000r 1               ;0xC000-		⊿PCM実体
000000r 1               ;0xE000-		プログラムコード
000000r 1               ;
000000r 1               ;	NSF Headerは、MMLコンパイラが作る。
000000r 1               ;
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; Define for C Langage
000000r 1               ; ------------------------------------------------------------------------
000000r 1               
000000r 1               	.export		_exit
000000r 1               	.export		__STARTUP__ : absolute = 1      ; Mark as startup
000000r 1               	.import		initlib, donelib, callmain
000000r 1               	.import		push0, _main, zerobss, copydata
000000r 1               	.import		ppubuf_flush
000000r 1               
000000r 1               	; Linker generated symbols
000000r 1               	.import		__RAM_START__, __RAM_SIZE__
000000r 1               	.import		__SRAM_START__, __SRAM_SIZE__
000000r 1               	.import		__ROM0_START__, __ROM0_SIZE__
000000r 1               	.import		__STARTUP_LOAD__,__STARTUP_RUN__, __STARTUP_SIZE__
000000r 1               	.import		__CODE_LOAD__,__CODE_RUN__, __CODE_SIZE__
000000r 1               	.import		__RODATA_LOAD__,__RODATA_RUN__, __RODATA_SIZE__
000000r 1               
000000r 1               	.include	"zeropage.inc"
000000r 2               ;
000000r 2               ; zeropage.inc
000000r 2               ;
000000r 2               ; (C) Copyright 2002 Ullrich von Bassewitz (uz@cc65.org)
000000r 2               ;
000000r 2               
000000r 2               ; Assembler include file that imports the runtime zero page locations used
000000r 2               ; by the compiler, ready for usage in asm code.
000000r 2               
000000r 2               
000000r 2               	.importzp   	sp, sreg, regsave
000000r 2               	.importzp   	ptr1, ptr2, ptr3, ptr4
000000r 2               	.importzp   	tmp1, tmp2, tmp3, tmp4
000000r 2               	.importzp   	regbank
000000r 2               
000000r 2               ; The total amount of zero page space used
000000r 2               
000000r 2               zpspace = 26
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               	.include	"nes.inc"
000000r 2               ;
000000r 2               ; NES definitions. By Groepaz/Hitmem.
000000r 2               ;
000000r 2               
000000r 2               
000000r 2               ;; FIXME: optimize zeropage usage
000000r 2               
000000r 2               SCREEN_PTR	= $62           ;2
000000r 2               CRAM_PTR        = $64           ;2
000000r 2               CHARCOLOR	= $66
000000r 2               BGCOLOR		= $67
000000r 2               RVS		= $68
000000r 2               CURS_X		= $69
000000r 2               CURS_Y		= $6a
000000r 2               
000000r 2               tickcount       = $6b           ;2
000000r 2               
000000r 2               VBLANK_FLAG	= $70
000000r 2               
000000r 2               ringbuff        = $0200
000000r 2               ringwrite       = $71
000000r 2               ringread        = $72
000000r 2               ringcount       = $73
000000r 2               
000000r 2               ppuhi           = $74
000000r 2               ppulo           = $75
000000r 2               ppuval          = $76
000000r 2               
000000r 2               screenrows 	= (30-1)
000000r 2               charsperline    = 32
000000r 2               xsize           = charsperline
000000r 2               
000000r 2               ;; PPU defines
000000r 2               
000000r 2               PPU_CTRL1      	= $2000
000000r 2               PPU_CTRL2	= $2001
000000r 2               PPU_STATUS	= $2002
000000r 2               PPU_SPR_ADDR	= $2003
000000r 2               PPU_SPR_IO  	= $2004
000000r 2               PPU_VRAM_ADDR1	= $2005
000000r 2               PPU_VRAM_ADDR2	= $2006
000000r 2               PPU_VRAM_IO	= $2007
000000r 2               
000000r 2               ;; APU defines
000000r 2               
000000r 2               APU_PULSE1CTRL  = $4000         ; Pulse #1 Control Register (W)
000000r 2               APU_PULSE1RAMP  = $4001         ; Pulse #1 Ramp Control Register (W)
000000r 2               APU_PULSE1FTUNE = $4002         ; Pulse #1 Fine Tune (FT) Register (W)
000000r 2               APU_PULSE1CTUNE = $4003         ; Pulse #1 Coarse Tune (CT) Register (W)
000000r 2               APU_PULSE2CTRL  = $4004         ; Pulse #2 Control Register (W)
000000r 2               APU_PULSE2RAMP  = $4005         ; Pulse #2 Ramp Control Register (W)
000000r 2               APU_PULSE2FTUNE = $4006         ; Pulse #2 Fine Tune Register (W)
000000r 2               APU_PULSE2STUNE = $4007         ; Pulse #2 Coarse Tune Register (W)
000000r 2               APU_TRICTRL1    = $4008         ; Triangle Control Register #1 (W)
000000r 2               APU_TRICTRL2    = $4009         ; Triangle Control Register #2 (?)
000000r 2               APU_TRIFREQ1    = $400A         ; Triangle Frequency Register #1 (W)
000000r 2               APU_TRIFREQ2    = $400B         ; Triangle Frequency Register #2 (W)
000000r 2               APU_NOISECTRL   = $400C         ; Noise Control Register #1 (W)
000000r 2               ;;APU_ = $400D  ; Unused (???)
000000r 2               APU_NOISEFREQ1  = $400E         ; Noise Frequency Register #1 (W)
000000r 2               APU_NOISEFREQ2  = $400F         ; Noise Frequency Register #2 (W)
000000r 2               APU_MODCTRL     = $4010         ; Delta Modulation Control Register (W)
000000r 2               APU_MODDA       = $4011         ; Delta Modulation D/A Register (W)
000000r 2               APU_MODADDR     = $4012         ; Delta Modulation Address Register (W)
000000r 2               APU_MODLEN      = $4013         ; Delta Modulation Data Length Register (W)
000000r 2               APU_SPR_DMA    	= $4014         ; Sprite DMA Register (W)
000000r 2               APU_CHANCTRL   	= $4015         ; Sound/Vertical Clock Signal Register (R)
000000r 2               APU_PAD1       	= $4016         ; Joypad #1 (RW)
000000r 2               APU_PAD2	= $4017         ; Joypad #2/SOFTCLK (RW)
000000r 2               
000000r 2               
000000r 2               CH_HLINE    	= 11
000000r 2               CH_VLINE    	= 14
000000r 2               CH_ULCORNER 	= 176
000000r 2               CH_URCORNER 	= 174
000000r 2               CH_LLCORNER 	= 173
000000r 2               CH_LRCORNER 	= 189
000000r 2               CH_TTEE	    	= 178
000000r 2               CH_RTEE	    	= 179
000000r 2               CH_BTEE	    	= 177
000000r 2               CH_LTEE	    	= 171
000000r 2               CH_CROSS    	= 123
000000r 2               CH_CURS_UP     	= 145
000000r 2               CH_CURS_DOWN	= 17
000000r 2               CH_CURS_LEFT	= 157
000000r 2               CH_CURS_RIGHT	= 29
000000r 2               CH_PI		= 126
000000r 2               CH_DEL		= 20
000000r 2               CH_INS		= 148
000000r 2               CH_ENTER        = 10
000000r 2               CH_STOP         = 3
000000r 2               CH_ESC          = 27
000000r 2               
000000r 2               
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; Define for sound driver
000000r 1               ; ------------------------------------------------------------------------
000000r 1               
000000r 1               	;Sound driver function
000000r 1               	.import		_nsd_main
000000r 1               	.import		_nsd_init
000000r 1               	.import		_nsd_play_bgm
000000r 1               	.import		_nsd_stop_bgm
000000r 1               ;	.import		_nsd_play_se
000000r 1               	.import		_nsd_stop_se
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; 変数
000000r 1               ; ------------------------------------------------------------------------
000000r 1               .zeropage
000000r 1               
000000r 1  00 00        _tmp:	.word	0		;Temp
000002r 1  00 00        _ptr:	.word	0		;Pointer
000004r 1               
000004r 1               .bss
000000r 1               
000000r 1  00           _eff:	.byte	0		;SE start number
000001r 1               
000001r 1               ; ------------------------------------------------------------------------
000001r 1               ; Place the startup code in a special segment.
000001r 1               ; ------------------------------------------------------------------------
000001r 1               .segment	"STARTUP"
000000r 1               
000000r 1               start:
000000r 1  78           	sei
000001r 1  D8           	cld
000002r 1               
000002r 1  A9 00        	lda	#$00
000004r 1  8D 00 20     	sta	$2000
000007r 1  8D 01 20     	sta	$2001
00000Ar 1               
00000Ar 1  78           	sei			; setup the CPU and System-IRQ
00000Br 1  D8           	cld			;
00000Cr 1  A2 FF        	ldx	#$FF		;
00000Er 1  9A           	txs			;s <- 0xFF
00000Fr 1               
00000Fr 1               	; Clear the BSS data
00000Fr 1  20 rr rr     	jsr	zerobss
000012r 1               
000012r 1               	; initialize data
000012r 1  20 rr rr     	jsr	copydata
000015r 1               
000015r 1               	; setup the stack
000015r 1  A9 rr        	lda	#<(__SRAM_START__ + __SRAM_SIZE__)
000017r 1  85 rr        	sta	sp
000019r 1  A9 rr        	lda	#>(__SRAM_START__ + __SRAM_SIZE__)
00001Br 1  85 rr        	sta	sp+1		; Set argument stack ptr
00001Dr 1               
00001Dr 1  20 rr rr     	jsr	_init
000020r 1               
000020r 1               	; Call module constructors
000020r 1  20 rr rr     	jsr	initlib
000023r 1               
000023r 1  A9 80        	lda	#$80		; PPU NMI on
000025r 1  8D 00 20     	sta	$2000
000028r 1               
000028r 1               	; Push arguments and call main()
000028r 1               ;	jsr	callmain
000028r 1               
000028r 1               	; Call module destructors. This is also the _exit entry.
000028r 1  20 rr rr     _exit:	jsr	donelib		; Run module destructors
00002Br 1               
00002Br 1               	; Reset the NES
00002Br 1  4C rr rr     	jmp	start
00002Er 1               
00002Er 1               ; ------------------------------------------------------------------------
00002Er 1               ; System V-Blank Interupt
00002Er 1               ; ------------------------------------------------------------------------
00002Er 1               
00002Er 1               nmi:
00002Er 1  48           	pha			;register push
00002Fr 1  98           	tya
000030r 1  48           	pha
000031r 1  8A           	txa
000032r 1  48           	pha
000033r 1               
000033r 1  20 rr rr     	jsr	_nsd_main
000036r 1               
000036r 1  68           	pla			;register pop
000037r 1  AA           	tax
000038r 1  68           	pla
000039r 1  A8           	tay
00003Ar 1  68           	pla
00003Br 1               
00003Br 1               	; Interrupt exit
00003Br 1               irq2:
00003Br 1               irq1:
00003Br 1               timerirq:
00003Br 1               irq:
00003Br 1  40           	rti
00003Cr 1               
00003Cr 1               ; ------------------------------------------------------------------------
00003Cr 1               ;
00003Cr 1               ; ------------------------------------------------------------------------
00003Cr 1               .proc	_nsf_main
00003Cr 1               
00003Cr 1  20 rr rr     	jsr	_nsd_main
00003Fr 1               
00003Fr 1  60           	rts
000040r 1               .endproc
000040r 1               
000040r 1               ; ------------------------------------------------------------------------
000040r 1               ;
000040r 1               ; ------------------------------------------------------------------------
000040r 1               .proc	_nsf_init
000040r 1  48           	pha
000041r 1               
000041r 1  20 rr rr     	jsr	_zero_mem
000044r 1               
000044r 1  20 rr rr     	jsr	_init
000047r 1               
000047r 1  68           	pla
000048r 1  20 rr rr     	jsr	_play_music
00004Br 1               
00004Br 1  60           	rts
00004Cr 1               .endproc
00004Cr 1               
00004Cr 1               ; ------------------------------------------------------------------------
00004Cr 1               ;
00004Cr 1               ; ------------------------------------------------------------------------
00004Cr 1               .proc	_zero_mem
00004Cr 1  A9 00        	lda	#0
00004Er 1  A2 00        	ldx	#0
000050r 1               
000050r 1               @L:
000050r 1  95 00        	sta	$0000,x	;Stackはクリアしない。
000052r 1  9D 00 02     	sta	$0200,x
000055r 1  9D 00 03     	sta	$0300,x
000058r 1  9D 00 04     	sta	$0400,x
00005Br 1  9D 00 05     	sta	$0500,x
00005Er 1  9D 00 06     	sta	$0600,x
000061r 1  9D 00 07     	sta	$0700,x
000064r 1  9D 00 60     	sta	$6000,x
000067r 1  9D 00 61     	sta	$6100,x
00006Ar 1  9D 00 62     	sta	$6200,x
00006Dr 1  9D 00 63     	sta	$6300,x
000070r 1  9D 00 64     	sta	$6400,x
000073r 1  9D 00 65     	sta	$6500,x
000076r 1  9D 00 66     	sta	$6600,x
000079r 1  9D 00 67     	sta	$6700,x
00007Cr 1  9D 00 68     	sta	$6800,x
00007Fr 1  9D 00 69     	sta	$6900,x
000082r 1  9D 00 6A     	sta	$6A00,x
000085r 1  9D 00 6B     	sta	$6B00,x
000088r 1  9D 00 6C     	sta	$6C00,x
00008Br 1  9D 00 6D     	sta	$6D00,x
00008Er 1  9D 00 6E     	sta	$6E00,x
000091r 1  9D 00 6F     	sta	$6F00,x
000094r 1  9D 00 70     	sta	$7000,x
000097r 1  9D 00 71     	sta	$7100,x
00009Ar 1  9D 00 72     	sta	$7200,x
00009Dr 1  9D 00 73     	sta	$7300,x
0000A0r 1  9D 00 74     	sta	$7400,x
0000A3r 1  9D 00 75     	sta	$7500,x
0000A6r 1  9D 00 76     	sta	$7600,x
0000A9r 1  9D 00 77     	sta	$7700,x
0000ACr 1  9D 00 78     	sta	$7800,x
0000AFr 1  9D 00 79     	sta	$7900,x
0000B2r 1  9D 00 7A     	sta	$7A00,x
0000B5r 1  9D 00 7B     	sta	$7B00,x
0000B8r 1  9D 00 7C     	sta	$7C00,x
0000BBr 1  9D 00 7D     	sta	$7D00,x
0000BEr 1  9D 00 7E     	sta	$7E00,x
0000C1r 1  9D 00 7F     	sta	$7F00,x
0000C4r 1  E8           	inx
0000C5r 1  D0 89        	bne	@L
0000C7r 1               
0000C7r 1  60           	rts
0000C8r 1               .endproc
0000C8r 1               
0000C8r 1               ; ------------------------------------------------------------------------
0000C8r 1               ;
0000C8r 1               ; ------------------------------------------------------------------------
0000C8r 1               .proc	_init
0000C8r 1               
0000C8r 1  20 rr rr     	jsr	_nsd_init
0000CBr 1               
0000CBr 1  A9 rr        	lda	#<(__ROM0_START__)
0000CDr 1  85 rr        	sta	_ptr
0000CFr 1  A9 rr        	lda	#>(__ROM0_START__)
0000D1r 1  85 rr        	sta	_ptr+1		;_ptr = __ROM0_START__
0000D3r 1               
0000D3r 1  A0 00        	ldy	#0
0000D5r 1  B1 rr        	lda	(_ptr),y
0000D7r 1  C8           	iny			;ax = BGM and SE's qty
0000D8r 1  8D rr rr     	sta	_eff
0000DBr 1               
0000DBr 1  B1 rr        	lda	(_ptr),y
0000DDr 1  C8           	iny
0000DEr 1  85 rr        	sta	_tmp
0000E0r 1  B1 rr        	lda	(_ptr),y
0000E2r 1  AA           	tax			;ax = Pointer of ⊿PCM infomation Struct
0000E3r 1  A5 rr        	lda	_tmp
0000E5r 1               
0000E5r 1               	;■■■	to do	⊿PCMのロード
0000E5r 1               
0000E5r 1  60           	rts
0000E6r 1               .endproc
0000E6r 1               
0000E6r 1               ; ------------------------------------------------------------------------
0000E6r 1               ;
0000E6r 1               ; ------------------------------------------------------------------------
0000E6r 1               .proc	_play_music
0000E6r 1               
0000E6r 1  48           	pha
0000E7r 1  A9 rr        	lda	#<(__ROM0_START__)
0000E9r 1  85 rr        	sta	_ptr
0000EBr 1  A9 rr        	lda	#>(__ROM0_START__)
0000EDr 1  85 rr        	sta	_ptr+1		;_ptr = __ROM0_START__
0000EFr 1  68           	pla
0000F0r 1               
0000F0r 1  CD rr rr     	cmp	_eff
0000F3r 1  08           	php
0000F4r 1  18           	clc
0000F5r 1  69 02        	adc	#2
0000F7r 1  0A           	asl	a
0000F8r 1  A8           	tay			; y = _mus * 2
0000F9r 1  B1 rr        	lda	(_ptr),y
0000FBr 1  85 rr        	sta	_tmp
0000FDr 1  C8           	iny
0000FEr 1  B1 rr        	lda	(_ptr),y	; ax = Pointer of BGM/SE
000100r 1  AA           	tax
000101r 1  A5 rr        	lda	_tmp
000103r 1  28           	plp
000104r 1               
000104r 1               ;	bcc	@L
000104r 1  20 rr rr     	jsr	_nsd_play_bgm
000107r 1               ;@L:	jmp	_nsd_play_se
000107r 1  60           	rts
000108r 1               .endproc
000108r 1               
000108r 1               
000108r 1               ; ------------------------------------------------------------------------
000108r 1               ; hardware vectors
000108r 1               ; ------------------------------------------------------------------------
000108r 1               
000108r 1               .segment "VECTORS"
000000r 1  rr rr        	.word	_nsf_init	; $fff0		MMLコンパイラが参照して、NSFヘッダーに埋め込む。
000002r 1  rr rr        	.word	_nsf_main	; $fff2		MMLコンパイラが参照して、NSFヘッダーに埋め込む。
000004r 1  rr rr        	.word	irq2		; $fff4 ?
000006r 1  rr rr        	.word	irq1		; $fff6 ?
000008r 1  rr rr        	.word	timerirq	; $fff8 ?
00000Ar 1  rr rr        	.word	nmi		; $fffa vblank nmi
00000Cr 1  rr rr        	.word	start		; $fffc reset
00000Er 1  rr rr        	.word	irq		; $fffe irq / brk
000010r 1               
000010r 1               
