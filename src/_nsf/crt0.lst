ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : crt0.s
Current file: crt0.s

000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; Define for C Langage
000000r 1               ; ------------------------------------------------------------------------
000000r 1               
000000r 1               	.export		_exit
000000r 1               	.export		__STARTUP__ : absolute = 1      ; Mark as startup
000000r 1               	.import		initlib, donelib, callmain
000000r 1               	.import		push0, _main, zerobss, copydata
000000r 1               	.import		ppubuf_flush
000000r 1               
000000r 1               	; Linker generated symbols
000000r 1               	.import		__RAM_START__, __RAM_SIZE__
000000r 1               	.import		__SRAM_START__, __SRAM_SIZE__
000000r 1               	.import		__ROM0_START__, __ROM0_SIZE__
000000r 1               	.import		__STARTUP_LOAD__,__STARTUP_RUN__, __STARTUP_SIZE__
000000r 1               	.import		__CODE_LOAD__,__CODE_RUN__, __CODE_SIZE__
000000r 1               	.import		__RODATA_LOAD__,__RODATA_RUN__, __RODATA_SIZE__
000000r 1               
000000r 1               	.import		nsd_work
000000r 1               	.importzp	nsd_work_zp
000000r 1               
000000r 1               	.include	"zeropage.inc"
000000r 2               ;
000000r 2               ; zeropage.inc
000000r 2               ;
000000r 2               ; (C) Copyright 2002 Ullrich von Bassewitz (uz@cc65.org)
000000r 2               ;
000000r 2               
000000r 2               ; Assembler include file that imports the runtime zero page locations used
000000r 2               ; by the compiler, ready for usage in asm code.
000000r 2               
000000r 2               
000000r 2               	.importzp   	sp, sreg, regsave
000000r 2               	.importzp   	ptr1, ptr2, ptr3, ptr4
000000r 2               	.importzp   	tmp1, tmp2, tmp3, tmp4
000000r 2               	.importzp   	regbank
000000r 2               
000000r 2               ; The total amount of zero page space used
000000r 2               
000000r 2               zpspace = 26
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               	.include	"nes.inc"
000000r 2               ;
000000r 2               ; NES definitions. By Groepaz/Hitmem.
000000r 2               ;
000000r 2               
000000r 2               
000000r 2               ;; FIXME: optimize zeropage usage
000000r 2               
000000r 2               SCREEN_PTR	= $62           ;2
000000r 2               CRAM_PTR        = $64           ;2
000000r 2               CHARCOLOR	= $66
000000r 2               BGCOLOR		= $67
000000r 2               RVS		= $68
000000r 2               CURS_X		= $69
000000r 2               CURS_Y		= $6a
000000r 2               
000000r 2               tickcount       = $6b           ;2
000000r 2               
000000r 2               VBLANK_FLAG	= $70
000000r 2               
000000r 2               ringbuff        = $0200
000000r 2               ringwrite       = $71
000000r 2               ringread        = $72
000000r 2               ringcount       = $73
000000r 2               
000000r 2               ppuhi           = $74
000000r 2               ppulo           = $75
000000r 2               ppuval          = $76
000000r 2               
000000r 2               screenrows 	= (30-1)
000000r 2               charsperline    = 32
000000r 2               xsize           = charsperline
000000r 2               
000000r 2               ;; PPU defines
000000r 2               
000000r 2               PPU_CTRL1      	= $2000
000000r 2               PPU_CTRL2	= $2001
000000r 2               PPU_STATUS	= $2002
000000r 2               PPU_SPR_ADDR	= $2003
000000r 2               PPU_SPR_IO  	= $2004
000000r 2               PPU_VRAM_ADDR1	= $2005
000000r 2               PPU_VRAM_ADDR2	= $2006
000000r 2               PPU_VRAM_IO	= $2007
000000r 2               
000000r 2               ;; APU defines
000000r 2               
000000r 2               APU_PULSE1CTRL  = $4000         ; Pulse #1 Control Register (W)
000000r 2               APU_PULSE1RAMP  = $4001         ; Pulse #1 Ramp Control Register (W)
000000r 2               APU_PULSE1FTUNE = $4002         ; Pulse #1 Fine Tune (FT) Register (W)
000000r 2               APU_PULSE1CTUNE = $4003         ; Pulse #1 Coarse Tune (CT) Register (W)
000000r 2               APU_PULSE2CTRL  = $4004         ; Pulse #2 Control Register (W)
000000r 2               APU_PULSE2RAMP  = $4005         ; Pulse #2 Ramp Control Register (W)
000000r 2               APU_PULSE2FTUNE = $4006         ; Pulse #2 Fine Tune Register (W)
000000r 2               APU_PULSE2STUNE = $4007         ; Pulse #2 Coarse Tune Register (W)
000000r 2               APU_TRICTRL1    = $4008         ; Triangle Control Register #1 (W)
000000r 2               APU_TRICTRL2    = $4009         ; Triangle Control Register #2 (?)
000000r 2               APU_TRIFREQ1    = $400A         ; Triangle Frequency Register #1 (W)
000000r 2               APU_TRIFREQ2    = $400B         ; Triangle Frequency Register #2 (W)
000000r 2               APU_NOISECTRL   = $400C         ; Noise Control Register #1 (W)
000000r 2               ;;APU_ = $400D  ; Unused (???)
000000r 2               APU_NOISEFREQ1  = $400E         ; Noise Frequency Register #1 (W)
000000r 2               APU_NOISEFREQ2  = $400F         ; Noise Frequency Register #2 (W)
000000r 2               APU_MODCTRL     = $4010         ; Delta Modulation Control Register (W)
000000r 2               APU_MODDA       = $4011         ; Delta Modulation D/A Register (W)
000000r 2               APU_MODADDR     = $4012         ; Delta Modulation Address Register (W)
000000r 2               APU_MODLEN      = $4013         ; Delta Modulation Data Length Register (W)
000000r 2               APU_SPR_DMA    	= $4014         ; Sprite DMA Register (W)
000000r 2               APU_CHANCTRL   	= $4015         ; Sound/Vertical Clock Signal Register (R)
000000r 2               APU_PAD1       	= $4016         ; Joypad #1 (RW)
000000r 2               APU_PAD2	= $4017         ; Joypad #2/SOFTCLK (RW)
000000r 2               
000000r 2               
000000r 2               CH_HLINE    	= 11
000000r 2               CH_VLINE    	= 14
000000r 2               CH_ULCORNER 	= 176
000000r 2               CH_URCORNER 	= 174
000000r 2               CH_LLCORNER 	= 173
000000r 2               CH_LRCORNER 	= 189
000000r 2               CH_TTEE	    	= 178
000000r 2               CH_RTEE	    	= 179
000000r 2               CH_BTEE	    	= 177
000000r 2               CH_LTEE	    	= 171
000000r 2               CH_CROSS    	= 123
000000r 2               CH_CURS_UP     	= 145
000000r 2               CH_CURS_DOWN	= 17
000000r 2               CH_CURS_LEFT	= 157
000000r 2               CH_CURS_RIGHT	= 29
000000r 2               CH_PI		= 126
000000r 2               CH_DEL		= 20
000000r 2               CH_INS		= 148
000000r 2               CH_ENTER        = 10
000000r 2               CH_STOP         = 3
000000r 2               CH_ESC          = 27
000000r 2               
000000r 2               
000000r 1               	.include	"nsd.inc"
000000r 2               
000000r 2               .scope	nsd
000000r 2               	BGM_Track	= 5
000000r 2               	SE_Track	= 2
000000r 2               	Track		= BGM_Track + SE_Track
000000r 2               
000000r 2               	TR_BGM1		= 0
000000r 2               	TR_BGM2		= 2
000000r 2               	TR_BGM3		= 4
000000r 2               	TR_BGM4		= 6
000000r 2               	TR_BGM5		= 8
000000r 2               	TR_SE1		= BGM_Track * 2 + 0
000000r 2               	TR_SE2		= BGM_Track * 2 + 2
000000r 2               
000000r 2               .endscope
000000r 2               
000000r 2               ;=======================================================================
000000r 2               ;	Working Struct define in Zero-page area
000000r 2               ;-----------------------------------------------------------------------
000000r 2               .Struct		NSD_Envelop
000000r 2               	V		.byte		;Volume & Voice (ch3:Tempo / ch5:Tempo_ctr)
000000r 2               	F		.byte		;Frequency & Note
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Length_Cnt
000000r 2               	counter		.byte		;now length of note
000000r 2               	gate		.byte		;length - u
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_work_zp
000000r 2               	_ptr		.word					;00 General pointer value
000000r 2               	_tmp		.word					;02 General value
000000r 2               	flag		.byte					;04 flag
000000r 2               	channel		.byte					;05 channel (y resister)
000000r 2               	Sequence_ptr	.word			nsd::Track	;06 Address of playing sequence
000000r 2               	Length		.tag	NSD_Length_Cnt	nsd::Track	;16 Length Counter
000000r 2               	Envelop		.tag	NSD_Envelop	nsd::Track	;26 Envelop counter
000000r 2               .Endstruct
000000r 2               
000000r 2               ;=======================================================================
000000r 2               ;	Working  Struct define in RAM area
000000r 2               ;-----------------------------------------------------------------------
000000r 2               
000000r 2               .Struct		NSD_Flag
000000r 2               	flag		.byte		;flag
000000r 2               	gatemode	.byte		;gatemode
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_length
000000r 2               	length		.byte		;l command value
000000r 2               	tai		.byte		;Tai & Slur
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_gatetime
000000r 2               	q		.byte		;q command value
000000r 2               	u		.byte		;u command value
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_note
000000r 2               	note		.byte		;note command value (bit 7 = `H' : rest)
000000r 2               	octave		.byte		;o command value
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Detune
000000r 2               	cent		.byte		;D command value
000000r 2               	fine		.byte		;D% command value
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Por_Lv
000000r 2               	target		.byte		;target
000000r 2               	inc		.byte		;add value
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Por_Sp
000000r 2               	decay		.byte		;
000000r 2               	rate		.byte		;rate (speed)
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Por_Co
000000r 2               	count		.byte		;rate control
000000r 2               	lv		.byte		;now depth
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Rep_Trans
000000r 2               	count		.byte		;counter of repeat
000000r 2               	trans		.byte		;transpose
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_volume
000000r 2               	volume		.byte		;v command value
000000r 2               	volume_set	.byte		;deveice setting value
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_voice
000000r 2               	voice		.byte		;@ command value
000000r 2               	voice_set	.byte		;deveice setting value
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Env_V_Ptr
000000r 2               	Volume		.byte					;Volume
000000r 2               	Voice		.byte					;Voice
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_Env_F_Ptr
000000r 2               	Frequency	.byte					;Freeuqncy
000000r 2               	Note		.byte					;Note
000000r 2               .Endstruct
000000r 2               
000000r 2               .Struct		NSD_work
000000r 2               	Flag		.tag	NSD_Flag	nsd::Track	;flag
000000r 2               	Length		.tag	NSD_length	nsd::Track	;note length [tick]
000000r 2               	Gatetime	.tag	NSD_gatetime	nsd::Track	;gate time [tick]
000000r 2               	Note		.tag	NSD_note	nsd::Track	;octave and note command
000000r 2               	Detune		.tag	NSD_Detune	nsd::Track	;detune
000000r 2               	Por_Lv		.tag	NSD_Por_Lv	nsd::Track	;Portamento
000000r 2               	Por_Sp		.tag	NSD_Por_Sp	nsd::Track	;Portamento
000000r 2               	Por_Co		.tag	NSD_Por_Co	nsd::Track	;Portamento
000000r 2               	Rep_Trans	.tag	NSD_Rep_Trans	nsd::Track	;Repeat and Transpose
000000r 2               	Volume		.tag	NSD_volume	nsd::Track	;volume
000000r 2               	Voice		.tag	NSD_voice	nsd::Track	;voice
000000r 2               	SubRoutine	.word			nsd::Track	;Pointer of sub-routine return address
000000r 2               	Frequency	.word			nsd::Track	;Setting frequency
000000r 2               	Frequency_Set	.word			nsd::Track	;Setting frequency for Device
000000r 2               	Envelop_Volume	.word			nsd::Track	;Pointer of envelop
000000r 2               	Envelop_Voice	.word			nsd::Track	;Pointer of envelop
000000r 2               	Envelop_Freq	.word			nsd::Track	;Pointer of envelop
000000r 2               	Envelop_Note	.word			nsd::Track	;Pointer of envelop
000000r 2               	Env_V_Ptr	.tag	NSD_Env_V_Ptr	nsd::Track	;
000000r 2               	Env_F_Ptr	.tag	NSD_Env_F_Ptr	nsd::Track	;
000000r 2               .Endstruct
000000r 2               
000000r 2               ;=======================================================================
000000r 2               ;	Defines for work structures
000000r 2               ;-----------------------------------------------------------------------
000000r 2               
000000r 2               .scope	nsd_flag
000000r 2               	BGM	= $01
000000r 2               	SE	= $02
000000r 2               .endscope
000000r 2               
000000r 2               ;Zero Page Works
000000r 2               .define	__ptr		nsd_work_zp + NSD_work_zp::_ptr
000000r 2               .define	__tmp		nsd_work_zp + NSD_work_zp::_tmp
000000r 2               .define	__flag		nsd_work_zp + NSD_work_zp::flag
000000r 2               .define	__channel	nsd_work_zp + NSD_work_zp::channel
000000r 2               .define	__Sequence_ptr	nsd_work_zp + NSD_work_zp::Sequence_ptr
000000r 2               .define	__Length_ctr	nsd_work_zp + NSD_work_zp::Length + NSD_Length_Cnt::counter
000000r 2               .define	__Gate		nsd_work_zp + NSD_work_zp::Length + NSD_Length_Cnt::gate
000000r 2               .define	__Envelop_V	nsd_work_zp + NSD_work_zp::Envelop + NSD_Envelop::V
000000r 2               .define	__Envelop_F	nsd_work_zp + NSD_work_zp::Envelop + NSD_Envelop::F
000000r 2               .define	__Tempo		nsd_work_zp + NSD_work_zp::Envelop + NSD_Envelop::V + nsd::TR_BGM3
000000r 2               .define	__Tempo_ctr	nsd_work_zp + NSD_work_zp::Envelop + NSD_Envelop::V + nsd::TR_BGM5
000000r 2               
000000r 2               .scope	nsd_chflag
000000r 2               	SE1	= $40
000000r 2               	SE2	= $80
000000r 2               .endscope
000000r 2               
000000r 2               ;RAM Works
000000r 2               .define	__chflag	nsd_work + NSD_work::Flag + NSD_Flag::flag
000000r 2               .define	__gatemode	nsd_work + NSD_work::Flag + NSD_Flag::gatemode
000000r 2               .define	__tai		nsd_work + NSD_work::Length + NSD_length::tai
000000r 2               .define	__length	nsd_work + NSD_work::Length + NSD_length::length
000000r 2               .define	__gate_q	nsd_work + NSD_work::Gatetime + NSD_gatetime::q
000000r 2               .define	__gate_u	nsd_work + NSD_work::Gatetime + NSD_gatetime::u
000000r 2               .define __note		nsd_work + NSD_work::Note + NSD_note::note
000000r 2               .define	__octave	nsd_work + NSD_work::Note + NSD_note::octave
000000r 2               .define	__detune_cent	nsd_work + NSD_work::Detune + NSD_Detune::cent
000000r 2               .define	__detune_fine	nsd_work + NSD_work::Detune + NSD_Detune::fine
000000r 2               .define	__por_target	nsd_work + NSD_work::Por_Lv + NSD_Por_Lv::target
000000r 2               .define	__por_inc	nsd_work + NSD_work::Por_Lv + NSD_Por_Lv::inc
000000r 2               .define	__por_decay	nsd_work + NSD_work::Por_Sp + NSD_Por_Sp::decay
000000r 2               .define	__por_rate	nsd_work + NSD_work::Por_Sp + NSD_Por_Sp::rate
000000r 2               .define	__por_ctr	nsd_work + NSD_work::Por_Co + NSD_Por_Co::count
000000r 2               .define	__por_lv	nsd_work + NSD_work::Por_Co + NSD_Por_Co::lv
000000r 2               .define	__trans		nsd_work + NSD_work::Rep_Trans + NSD_Rep_Trans::trans
000000r 2               .define	__repeat_ctr	nsd_work + NSD_work::Rep_Trans + NSD_Rep_Trans::count
000000r 2               .define	__volume	nsd_work + NSD_work::Volume + NSD_volume::volume
000000r 2               .define	__volume_set	nsd_work + NSD_work::Volume + NSD_volume::volume_set
000000r 2               .define	__voice		nsd_work + NSD_work::Voice + NSD_voice::voice
000000r 2               .define	__voice_set	nsd_work + NSD_work::Voice + NSD_voice::voice_set
000000r 2               .define	__frequency	nsd_work + NSD_work::Frequency
000000r 2               .define	__frequency_set	nsd_work + NSD_work::Frequency_Set
000000r 2               .define	__subroutine	nsd_work + NSD_work::SubRoutine
000000r 2               .define	__env_volume	nsd_work + NSD_work::Envelop_Volume
000000r 2               .define	__env_voice	nsd_work + NSD_work::Envelop_Voice
000000r 2               .define	__env_frequency	nsd_work + NSD_work::Envelop_Freq
000000r 2               .define	__env_note	nsd_work + NSD_work::Envelop_Note
000000r 2               .define	__env_vol_ptr	nsd_work + NSD_work::Env_V_Ptr + NSD_Env_V_Ptr::Volume
000000r 2               .define	__env_voi_ptr	nsd_work + NSD_work::Env_V_Ptr + NSD_Env_V_Ptr::Voice
000000r 2               .define	__env_freq_ptr	nsd_work + NSD_work::Env_F_Ptr + NSD_Env_F_Ptr::Frequency
000000r 2               .define	__env_note_ptr	nsd_work + NSD_work::Env_F_Ptr + NSD_Env_F_Ptr::Note
000000r 2               
000000r 2               ;=======================================================================
000000r 2               ;	Macros
000000r 2               ;-----------------------------------------------------------------------
000000r 2               
000000r 2               .MACPACK generic
000000r 2               
000000r 2               .macro  ldax    arg
000000r 2               	.if (.match (.left (1, {arg}), #))
000000r 2               		; immediate mode
000000r 2               		lda     #<(.right (.tcount ({arg})-1, {arg}))
000000r 2               		ldx     #>(.right (.tcount ({arg})-1, {arg}))
000000r 2               	.else
000000r 2               		; assume absolute or zero page
000000r 2               		lda     arg
000000r 2               		ldx     1+(arg)
000000r 2               	.endif
000000r 2               .endmacro
000000r 2               
000000r 2               .macro  addw    Arg
000000r 2               	clc
000000r 2               	.if (.match (.left (1, {arg}), #))
000000r 2               		; immediate mode
000000r 2               		adc     #<(.right (.tcount ({arg})-1, {arg}))
000000r 2               		adc     #>(.right (.tcount ({arg})-1, {arg}))
000000r 2               	.else
000000r 2               		; assume absolute or zero page
000000r 2               		adc     arg
000000r 2               		adc     1+(arg)
000000r 2               	.endif
000000r 2               .endmacro
000000r 2               
000000r 2               .macro  subw    Arg
000000r 2               	sec
000000r 2               	.if (.match (.left (1, {arg}), #))
000000r 2               		; immediate mode
000000r 2               		sbc     #<(.right (.tcount ({arg})-1, {arg}))
000000r 2               		sbc     #>(.right (.tcount ({arg})-1, {arg}))
000000r 2               	.else
000000r 2               		; assume absolute or zero page
000000r 2               		sbc     arg
000000r 2               		sbc     1+(arg)
000000r 2               	.endif
000000r 2               .endmacro
000000r 2               
000000r 2               .macro	shl	arg, c
000000r 2               	.repeat	c
000000r 2               		asl	arg
000000r 2               	.endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               .macro	shr	arg, c
000000r 2               	.repeat	c
000000r 2               		lsr	arg
000000r 2               	.endrepeat
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; Define for sound driver
000000r 1               ; ------------------------------------------------------------------------
000000r 1               
000000r 1               	.export		_init
000000r 1               	.export		_vblank_main
000000r 1               
000000r 1               	;Sound driver function
000000r 1               	.import		_nsd_main
000000r 1               	.import		_nsd_snd_init
000000r 1               	.import		_nsd_snd_keyon
000000r 1               	.import		_nsd_snd_keyoff
000000r 1               	.import		_nsd_snd_voice
000000r 1               	.import		_nsd_snd_volume
000000r 1               	.import		_nsd_snd_frequency
000000r 1               
000000r 1               ; ------------------------------------------------------------------------
000000r 1               ; 16 bytes INES header
000000r 1               ; ------------------------------------------------------------------------
000000r 1               
000000r 1               .segment        "HEADER"
000000r 1               
000000r 1  4E 45 53 4D  	.byte	$4E,$45,$53,$4D,$1A	;00	"NESM",0x1A
000004r 1  1A           
000005r 1  01           	.byte	1			;05	Version
000006r 1  07           	.byte	7			;06	Music number
000007r 1  01           	.byte	1			;07	Start Music number
000008r 1  00 80        	.addr	$8000			;08	Load address
00000Ar 1  rr rr        	.addr	_init			;0A	Init routine address
00000Cr 1  rr rr        	.addr	_vblank_main		;0C	Sound driver main routine address
00000Er 1  20 20 20 20  	.res	31,	$20
000012r 1  20 20 20 20  
000016r 1  20 20 20 20  
00001Ar 1  20 20 20 20  
00001Er 1  20 20 20 20  
000022r 1  20 20 20 20  
000026r 1  20 20 20 20  
00002Ar 1  20 20 20     
00002Dr 1  00           	.byte	0
00002Er 1  20 20 20 20  	.res	31,	$20
000032r 1  20 20 20 20  
000036r 1  20 20 20 20  
00003Ar 1  20 20 20 20  
00003Er 1  20 20 20 20  
000042r 1  20 20 20 20  
000046r 1  20 20 20 20  
00004Ar 1  20 20 20     
00004Dr 1  00           	.byte	0
00004Er 1  20 20 20 20  	.res	31,	$20
000052r 1  20 20 20 20  
000056r 1  20 20 20 20  
00005Ar 1  20 20 20 20  
00005Er 1  20 20 20 20  
000062r 1  20 20 20 20  
000066r 1  20 20 20 20  
00006Ar 1  20 20 20     
00006Dr 1  00           	.byte	0
00006Er 1  1A 41        	.word	$411A			;6E	60Hz
000070r 1  00 00 00 00  	.byte	0,0,0,0,0,0,0,0		;70	bank
000074r 1  00 00 00 00  
000078r 1  00 00 00 00  	.byte	0,0,0,0,0,0,0,0		;78
00007Cr 1  00 00 00 00  
000080r 1               
000080r 1               ; ------------------------------------------------------------------------
000080r 1               ; Place the startup code in a special segment.
000080r 1               ; ------------------------------------------------------------------------
000080r 1               
000080r 1               .segment	"STARTUP"
000000r 1               
000000r 1               start:
000000r 1  78           	sei			; setup the CPU and System-IRQ
000001r 1  D8           	cld			;
000002r 1  A2 FF        	ldx	#$FF		;
000004r 1  9A           	txs			;s <- 0xFF
000005r 1               
000005r 1               	; Clear the BSS data
000005r 1  20 rr rr     	jsr	zerobss
000008r 1               
000008r 1               	; initialize data
000008r 1  20 rr rr     	jsr	copydata
00000Br 1               
00000Br 1               	; setup the stack
00000Br 1  A9 rr        	lda	#<(__SRAM_START__ + __SRAM_SIZE__)
00000Dr 1  85 rr        	sta	sp
00000Fr 1  A9 rr        	lda	#>(__SRAM_START__ + __SRAM_SIZE__)
000011r 1  85 rr        	sta	sp+1		; Set argument stack ptr
000013r 1               
000013r 1               	; Call module constructors
000013r 1  20 rr rr     	jsr	initlib
000016r 1               
000016r 1               	; Push arguments and call main()
000016r 1  20 rr rr     	jsr	callmain
000019r 1               
000019r 1               	; Call module destructors. This is also the _exit entry.
000019r 1  20 rr rr     _exit:	jsr	donelib		; Run module destructors
00001Cr 1               
00001Cr 1               	; Reset the NES
00001Cr 1  4C rr rr     	jmp start
00001Fr 1               
00001Fr 1               ; ------------------------------------------------------------------------
00001Fr 1               ; System V-Blank Interupt
00001Fr 1               ; ------------------------------------------------------------------------
00001Fr 1               
00001Fr 1               nmi:
00001Fr 1  48           	pha			;register push
000020r 1  98           	tya
000021r 1  48           	pha
000022r 1  8A           	txa
000023r 1  48           	pha
000024r 1               
000024r 1  20 rr rr     	jsr	_nsd_main
000027r 1               
000027r 1  68           	pla			;register pop
000028r 1  AA           	tax
000029r 1  68           	pla
00002Ar 1  A8           	tay
00002Br 1  68           	pla
00002Cr 1               
00002Cr 1               	; Interrupt exit
00002Cr 1               irq2:
00002Cr 1               irq1:
00002Cr 1               timerirq:
00002Cr 1               irq:
00002Cr 1  40           	rti
00002Dr 1               
00002Dr 1               ; ------------------------------------------------------------------------
00002Dr 1               ; Place the startup code in a special segment.
00002Dr 1               ; ------------------------------------------------------------------------
00002Dr 1               
00002Dr 1               .proc	_init
00002Dr 1               .bss
000000r 1  00 00        tmp:	.word	0
000002r 1               .segment	"STARTUP"
00002Dr 1  8D rr rr     	sta	tmp
000030r 1               
000030r 1               	;Sound Driver init
000030r 1  20 rr rr     	jsr	_nsd_snd_init
000033r 1               
000033r 1  AD rr rr     	lda	tmp
000036r 1  0A           	shl	a, 1
000037r 1  85 rr        	sta	__channel
000039r 1               
000039r 1  AD rr rr     	lda	tmp
00003Cr 1  20 rr rr     	jsr	_nsd_snd_voice
00003Fr 1               
00003Fr 1  A9 C0        	lda	#$C0
000041r 1  20 rr rr     	jsr	_nsd_snd_volume
000044r 1               
000044r 1  20 rr rr     	jsr	_nsd_snd_keyon
000047r 1               
000047r 1  60           	rts
000048r 1               .endproc
000048r 1               
000048r 1               .proc	_vblank_main
000048r 1               .bss
000002r 1  00 00        Freq:	.word	0
000004r 1  00           flag:	.byte	0
000005r 1               .segment	"STARTUP"
000048r 1               
000048r 1  A9 08        	lda	#$08
00004Ar 1  8D 01 40     	sta	APU_PULSE1RAMP		; Pulse #1 Ramp Control Register (W)
00004Dr 1  8D 05 40     	sta	APU_PULSE2RAMP		; Pulse #2 Ramp Control Register (W)
000050r 1               
000050r 1  AD rr rr     	lda	Freq + 1
000053r 1  29 07        	and	#$07
000055r 1  8D rr rr     	sta	Freq + 1
000058r 1  AA           	tax
000059r 1  AD rr rr     	lda	Freq
00005Cr 1  20 rr rr     	jsr	_nsd_snd_frequency
00005Fr 1  AD rr rr     	lda	Freq
000062r 1  18           	clc
000063r 1  69 01        	adc	#1
000065r 1  8D rr rr     	sta	Freq
000068r 1  90 03        	bcc	@L
00006Ar 1  EE rr rr     	inc	Freq + 1
00006Dr 1               @L:
00006Dr 1  60           	rts
00006Er 1               .endproc
00006Er 1               
00006Er 1               ; ------------------------------------------------------------------------
00006Er 1               ; hardware vectors
00006Er 1               ; ------------------------------------------------------------------------
00006Er 1               
00006Er 1               .segment "VECTORS"
000000r 1               
000000r 1  rr rr        	.word	irq2		; $fff4 ?
000002r 1  rr rr        	.word	irq1		; $fff6 ?
000004r 1  rr rr        	.word	timerirq	; $fff8 ?
000006r 1  rr rr        	.word	nmi		; $fffa vblank nmi
000008r 1  rr rr        	.word	start		; $fffc reset
00000Ar 1  rr rr        	.word	irq		; $fffe irq / brk
00000Cr 1               
00000Cr 1               
