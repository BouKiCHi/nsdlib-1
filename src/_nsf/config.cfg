
MEMORY {

	HEADER:	start = $0,		size = $80,		type = ro,	file = %O,	fill = yes;					#NSF Header
	ROM0:	start = $8000,	size = $4000,	type = ro,	file = %O,	fill = yes,	define = yes;	#Music page		0x8000 - 0xBFFF
	ROM2:	start = $C000,	size = $2000,	type = ro,	file = %O,	fill = yes,	define = yes;	#DPCM page		0xC000 - 0xDFFF
	ROM3:	start = $E000,	size = $1ff4,	type = ro,	file = %O,	fill = yes,	define = yes;	#Program page	0xE000 - 0xFFF5
	ROMV:	start = $fff6,	size = $000c,	type = ro,	file = %O,	fill = yes;					#Vector			0xFFF6 - 0xFFFF
	ZP:		start = $02,	size = $60,		type = rw,							define = yes;	#Zeropage		0x0000 - 0x00FF
	SRAM:	start = $0200,	size = $0600,	type = rw,							define = yes;	#SRAM			0x0200 - 0x07FF
	RAM:	start = $6000,	size = $2000,	type = rw,							define = yes;	#RAM			0x6000 - 0x7FFF
}

SEGMENTS {
	HEADER:		load = HEADER,          type = ro;
	MUSIC:		load = ROM0,			type = ro,	define = yes;	#Music data
	DPCM:		load = ROM2,			type = ro,	define = yes;	#DPCM data
	STARTUP:	load = ROM3,            type = ro,  define = yes;
	LOWCODE:	load = ROM3,            type = ro,                optional = yes;
	INIT:		load = ROM3,            type = ro,  define = yes, optional = yes;
	CODE:		load = ROM3,            type = ro,  define = yes;
	RODATA:		load = ROM3,            type = ro,  define = yes;
	DATA:		load = ROM3, run = SRAM,type = rw,  define = yes;
	VECTORS:	load = ROMV,            type = ro;
	BSS:		load = SRAM,            type = bss, define = yes;
	HEAP:		load = SRAM,            type = bss, optional = yes;
	ZEROPAGE:	load = ZP,              type = zp;
}

FEATURES {
    CONDES: segment = INIT,
	    type = constructor,
	    label = __CONSTRUCTOR_TABLE__,
	    count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
	    type = destructor,
	    label = __DESTRUCTOR_TABLE__,
	    count = __DESTRUCTOR_COUNT__;
    CONDES: type = interruptor,
	    segment = RODATA,
	    label = __INTERRUPTOR_TABLE__,
	    count = __INTERRUPTOR_COUNT__;
}

SYMBOLS {
    __STACKSIZE__ = $0300;  	# 3 pages stack
}
