; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\FDSM.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
;	COMDAT ??_C@_1DI@HLDMHNAJ@?$AAF?$AAD?$AAS?$AAM0nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA70n?$HL?DV?r0gc?$AH@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1EG@IDKJCHCJ@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1EG@BOLFLOBH@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04NBDFMLMA@FDSM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E3
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT ?Command@?1???0FDSM@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FDSM@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1DI@HLDMHNAJ@?$AAF?$AAD?$AAS?$AAM0nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA70n?$HL?DV?r0gc?$AH@ ; `string'
PUBLIC	??_C@_1EG@IDKJCHCJ@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@ ; `string'
PUBLIC	??_C@_1EG@BOLFLOBH@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@ ; `string'
PUBLIC	??_C@_04NBDFMLMA@FDSM?$AA@			; `string'
PUBLIC	?getAsm@FDSM@@UAEXPAVMusicFile@@@Z		; FDSM::getAsm
PUBLIC	??_7FDSM@@6B@					; FDSM::`vftable'
;	COMDAT ?Command@?1???0FDSM@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B
CONST	SEGMENT
?Command@?1???0FDSM@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B DD FLAT:??_C@_01FGNFDNOH@?$CF?$AA@ ; `FDSM::FDSM'::`2'::Command
	DD	00H
	DD	FLAT:??_C@_01EPMOAMKG@$?$AA@
	DD	00H
	DD	FLAT:??_C@_01GBGANLPD@0?$AA@
	DD	00H
	DD	FLAT:??_C@_01HIHLOKLC@1?$AA@
	DD	00H
	DD	FLAT:??_C@_01FDFGLJHB@2?$AA@
	DD	00H
	DD	FLAT:??_C@_01EKENIIDA@3?$AA@
	DD	00H
	DD	FLAT:??_C@_01FAMBOPH@4?$AA@
	DD	00H
	DD	FLAT:??_C@_01BMBHCPLG@5?$AA@
	DD	00H
	DD	FLAT:??_C@_01DHDKHMHF@6?$AA@
	DD	00H
	DD	FLAT:??_C@_01COCBENDE@7?$AA@
	DD	00H
	DD	FLAT:??_C@_01KJLJFBPL@8?$AA@
	DD	00H
	DD	FLAT:??_C@_01LAKCGALK@9?$AA@
	DD	00H
	DD	FLAT:??_C@_01IHBHIGKO@?0?$AA@
	DD	01H
CONST	ENDS
;	COMDAT ??_C@_1DI@HLDMHNAJ@?$AAF?$AAD?$AAS?$AAM0nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA70n?$HL?DV?r0gc?$AH@
CONST	SEGMENT
??_C@_1DI@HLDMHNAJ@?$AAF?$AAD?$AAS?$AAM0nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA70n?$HL?DV?r0gc?$AH@ DB 'F'
	DB	00H, 'D', 00H, 'S', 00H, 'M', 00H, 'n0', 0e2H, 'lb_', 0d1H, '0'
	DB	0bfH, '0', 0fcH, '0', 0f3H, '0o00', 00H, '^', 0ffH, '7', 00H, 'n'
	DB	'0', 0c4H, '{', 0f2H, 'Vg0', 07H, 'c', 09aH, '[W0f0', 0bH, 'NU'
	DB	'0D0', 02H, '0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@IDKJCHCJ@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@
CONST	SEGMENT
??_C@_1EG@IDKJCHCJ@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@ DB 0e2H
	DB	'lb_', 0d1H, '0', 0bfH, '0', 0fcH, '0', 0f3H, '0o03', 00H, '2', 00H
	DB	0bH, 'Pn0peW[', 092H, '0', 018H, 08aH, 0f0H, 08fH, 'W0f0O0`0U0'
	DB	'D0', 02H, '03', 00H, '2', 00H, 0bH, 'Pk0', 080H, 'n_0j0D0g0Y0'
	DB	02H, '0', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@BOLFLOBH@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@
CONST	SEGMENT
??_C@_1EG@BOLFLOBH@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@ DB 0e2H
	DB	'lb_', 0d1H, '0', 0bfH, '0', 0fcH, '0', 0f3H, '0o03', 00H, '2', 00H
	DB	0bH, 'Pn0peW[', 092H, '0', 018H, 08aH, 0f0H, 08fH, 'W0f0O0`0U0'
	DB	'D0', 02H, '03', 00H, '2', 00H, 0bH, 'P', 092H, '0', 085H, 08dH
	DB	'H0f0D0~0Y0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBDFMLMA@FDSM?$AA@
CONST	SEGMENT
??_C@_04NBDFMLMA@FDSM?$AA@ DB 'FDSM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7FDSM@@6B@
CONST	SEGMENT
??_7FDSM@@6B@ DD FLAT:?getCode@MusicItem@@UAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; FDSM::`vftable'
	DD	FLAT:?setCode@MusicItem@@UAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getAsm@FDSM@@UAEXPAVMusicFile@@@Z
; Function compile flags: /Ogsy
; File f:\nes\nsdl\src\nsc\fdsm.cpp
_TEXT	SEGMENT
_MUS$ = 8						; size = 4
?getAsm@FDSM@@UAEXPAVMusicFile@@@Z PROC NEAR		; FDSM::getAsm
; _this$ = ecx

; 146  : {

  00000	56		 push	 esi

; 147  : 	*MUS << MUS->Header.Label.c_str() << "FDSM" << m_id << ":" << endl;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _MUS$[esp]
  00005	8d 86 a8 00 00
	00		 lea	 eax, DWORD PTR [esi+168]
  0000b	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0000f	57		 push	 edi
  00010	8b f9		 mov	 edi, ecx
  00012	72 05		 jb	 SHORT $L64945
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	eb 03		 jmp	 SHORT $L64946
$L64945:
  00019	83 c0 04	 add	 eax, 4
$L64946:
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00021	ff 77 3c	 push	 DWORD PTR [edi+60]
  00024	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04NBDFMLMA@FDSM?$AA@
  0002c	50		 push	 eax
  0002d	8b c6		 mov	 eax, esi
  0002f	f7 d8		 neg	 eax
  00031	1b c0		 sbb	 eax, eax
  00033	23 c1		 and	 eax, ecx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00043	59		 pop	 ecx
  00044	59		 pop	 ecx
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 148  : 	MusicItem::getAsm(MUS);

  0005a	56		 push	 esi
  0005b	8b cf		 mov	 ecx, edi
  0005d	e8 00 00 00 00	 call	 ?getAsm@MusicItem@@UAEXPAVMusicFile@@@Z ; MusicItem::getAsm
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 149  : }

  00064	c2 04 00	 ret	 4
?getAsm@FDSM@@UAEXPAVMusicFile@@@Z ENDP			; FDSM::getAsm
PUBLIC	??1FDSM@@QAE@XZ					; FDSM::~FDSM
; Function compile flags: /Ogsy
_TEXT	SEGMENT
??1FDSM@@QAE@XZ PROC NEAR				; FDSM::~FDSM
; _this$ = ecx

; 135  : {

  00067	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7FDSM@@6B@

; 136  : }

  0006d	e9 00 00 00 00	 jmp	 ??1MusicItem@@QAE@XZ	; MusicItem::~MusicItem
??1FDSM@@QAE@XZ ENDP					; FDSM::~FDSM
PUBLIC	??0FDSM@@QAE@PAVMMLfile@@IQBG@Z			; FDSM::FDSM
$T108953 DD	0ffffffffH
	DD	FLAT:$L108802
	DD	00H
	DD	FLAT:$L108803
$T108934 DD	019930520H
	DD	02H
	DD	FLAT:$T108953
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogsy
_TEXT	SEGMENT
_WAVE$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_this$ = 8						; size = 4
_ptFDSM$ = 12						; size = 4
__strName$ = 12						; size = 4
??0FDSM@@QAE@PAVMMLfile@@IQBG@Z PROC NEAR		; FDSM::FDSM
; _MML$ = edx
; __id$ = ecx

; 26   : {

  00072	b8 00 00 00 00	 mov	 eax, __ehhandler$??0FDSM@@QAE@PAVMMLfile@@IQBG@Z
  00077	e8 00 00 00 00	 call	 __EH_prolog
  0007c	83 ec 20	 sub	 esp, 32			; 00000020H
  0007f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00084	53		 push	 ebx
  00085	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  00088	56		 push	 esi
  00089	57		 push	 edi
  0008a	ff 75 0c	 push	 DWORD PTR __strName$[ebp]
  0008d	8b f1		 mov	 esi, ecx
  0008f	56		 push	 esi
  00090	53		 push	 ebx
  00091	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00094	8b fa		 mov	 edi, edx
  00096	e8 00 00 00 00	 call	 ??0MusicItem@@QAE@HQBG@Z ; MusicItem::MusicItem
  0009b	33 c0		 xor	 eax, eax
  0009d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 27   : 	//----------------------
; 28   : 	//Local変数
; 29   : 
; 30   : 
; 31   : //	定数定義
; 32   : enum	Command_ID_mml {
; 33   : 	FDSM_Num,
; 34   : 	FDSM_Commma
; 35   : };
; 36   : 
; 37   : //	これらは、MML構文で使えるコマンド。
; 38   : const	static	Command_Info	Command[] = {
; 39   : 		{	"%",	FDSM_Num	},
; 40   : 		{	"$",	FDSM_Num	},
; 41   : 		{	"0",	FDSM_Num	},
; 42   : 		{	"1",	FDSM_Num	},
; 43   : 		{	"2",	FDSM_Num	},
; 44   : 		{	"3",	FDSM_Num	},
; 45   : 		{	"4",	FDSM_Num	},
; 46   : 		{	"5",	FDSM_Num	},
; 47   : 		{	"6",	FDSM_Num	},
; 48   : 		{	"7",	FDSM_Num	},
; 49   : 		{	"8",	FDSM_Num	},
; 50   : 		{	"9",	FDSM_Num	},
; 51   : 		{	",",	FDSM_Commma	}
; 52   : };
; 53   : 
; 54   : 				int		i;
; 55   : 	unsigned	char	cData;
; 56   : 	unsigned	int		ptFDSM		= 0;
; 57   : 				string	WAVE;

  000a0	50		 push	 eax
  000a1	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  000a4	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET FLAT:??_7FDSM@@6B@
  000aa	89 73 3c	 mov	 DWORD PTR [ebx+60], esi
  000ad	89 45 0c	 mov	 DWORD PTR _ptFDSM$[ebp], eax
  000b0	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _WAVE$[ebp+24], 15 ; 0000000fH
  000b7	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 58   : 
; 59   : 	//------------------------------
; 60   : 	//クラスの初期設定
; 61   : 	WAVE.clear();

  000bc	8d 45 d4	 lea	 eax, DWORD PTR _WAVE$[ebp]
  000bf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c3	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear

; 62   : 
; 63   : 	//------------------------------
; 64   : 	//コンパイル
; 65   : 
; 66   : 	// { の検索
; 67   : 	while(MML->cRead() != '{'){

  000c8	eb 0f		 jmp	 SHORT $L108949
$L23945:

; 68   : 		if(MML->eof()){

  000ca	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cf	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000d2	f6 44 01 08 01	 test	 BYTE PTR [ecx+eax+8], 1
  000d7	75 53		 jne	 SHORT $L108938
$L108949:

; 62   : 
; 63   : 	//------------------------------
; 64   : 	//コンパイル
; 65   : 
; 66   : 	// { の検索
; 67   : 	while(MML->cRead() != '{'){

  000d9	8b f7		 mov	 esi, edi
  000db	e8 00 00 00 00	 call	 ?cRead@MMLfile@@QAEDXZ	; MMLfile::cRead
  000e0	3c 7b		 cmp	 al, 123			; 0000007bH
  000e2	75 e6		 jne	 SHORT $L23945

; 70   : 		}
; 71   : 	}
; 72   : 
; 73   : 	code.resize(0);

  000e4	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  000e7	6a 00		 push	 0
  000e9	33 c0		 xor	 eax, eax
  000eb	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 74   : 
; 75   : 	// } が来るまで、記述ブロック内をコンパイルする。
; 76   : 	while((cData = MML->GetChar()) != '}'){

  000f0	e8 00 00 00 00	 call	 ?GetChar@MMLfile@@QAEDXZ ; MMLfile::GetChar
  000f5	3c 7d		 cmp	 al, 125			; 0000007dH
  000f7	74 75		 je	 SHORT $L108942
$L23950:

; 77   : 		
; 78   : 		// } が来る前に、[EOF]が来たらエラー
; 79   : 		if( MML->eof() ){

  000f9	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fe	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00101	f6 44 01 08 01	 test	 BYTE PTR [ecx+eax+8], 1

; 81   : 		}
; 82   : 
; 83   : 		//１つ戻る
; 84   : 		MML->Back();

  00106	8b c7		 mov	 eax, edi
  00108	75 6b		 jne	 SHORT $L108939
  0010a	e8 00 00 00 00	 call	 ?Back@MMLfile@@QAEXXZ	; MMLfile::Back

; 85   : 
; 86   : 
; 87   : 		//各コマンド毎の処理
; 88   : 		switch(MML->GetCommandID(Command, sizeof(Command)/sizeof(Command_Info))){

  0010f	6a 0d		 push	 13			; 0000000dH
  00111	68 00 00 00 00	 push	 OFFSET FLAT:?Command@?1???0FDSM@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B
  00116	8b c7		 mov	 eax, edi
  00118	e8 00 00 00 00	 call	 ?GetCommandID@MMLfile@@QAEHQBUCommand_Info@@I@Z ; MMLfile::GetCommandID
  0011d	83 e8 00	 sub	 eax, 0
  00120	74 11		 je	 SHORT $L23959
  00122	48		 dec	 eax
  00123	74 38		 je	 SHORT $L23956

; 98   : 				break;
; 99   : 
; 100  : 			case(FDSM_Commma):
; 101  : 				break;
; 102  : 
; 103  : 			//unknown command
; 104  : 			default:
; 105  : 				MML->Err(_T("unknown command"));

  00125	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CA@BFMKMMBP@?$AAu?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?$AA@
  0012a	eb 5e		 jmp	 SHORT $L108951
$L108938:

; 69   : 			MML->Err(_T("ブロックの開始を示す{が見つかりません。"));

  0012c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CK@CKPPJBGB@0?V0?m0?C0?$KP0n?$JF?$ILY?K0?$JCy?30Y?$AA?$HL0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0?$AC@
  00131	eb 57		 jmp	 SHORT $L108951
$L23959:

; 89   : 
; 90   : 			case(FDSM_Num):
; 91   : 				MML->Back();

  00133	8b c7		 mov	 eax, edi
  00135	e8 00 00 00 00	 call	 ?Back@MMLfile@@QAEXXZ	; MMLfile::Back

; 92   : 				i = MML->GetInt();

  0013a	8b c7		 mov	 eax, edi
  0013c	e8 00 00 00 00	 call	 ?GetInt@MMLfile@@QAEHXZ	; MMLfile::GetInt

; 93   : 				if( (i<0) || (i>7)){

  00141	85 c0		 test	 eax, eax
  00143	7c 37		 jl	 SHORT $L108940
  00145	83 f8 07	 cmp	 eax, 7
  00148	7f 32		 jg	 SHORT $L108940

; 95   : 				}
; 96   : 				WAVE.append((char)1, (char)i & 0x07);

  0014a	25 07 ff ff ff	 and	 eax, -249		; ffffff07H
  0014f	50		 push	 eax
  00150	6a 01		 push	 1
  00152	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  00155	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 97   : 				ptFDSM++;

  0015a	ff 45 0c	 inc	 DWORD PTR _ptFDSM$[ebp]
$L23956:
  0015d	e8 00 00 00 00	 call	 ?GetChar@MMLfile@@QAEDXZ ; MMLfile::GetChar
  00162	3c 7d		 cmp	 al, 125			; 0000007dH
  00164	75 93		 jne	 SHORT $L23950

; 106  : 				break;
; 107  : 		}
; 108  : 	}
; 109  : 	if(ptFDSM < 32){

  00166	8b 75 0c	 mov	 esi, DWORD PTR _ptFDSM$[ebp]
  00169	83 fe 20	 cmp	 esi, 32			; 00000020H
  0016c	73 15		 jae	 SHORT $L108950
$L108942:

; 110  : 		MML->Err(_T("波形パターンは32個の数字を記述してください。32個に満たないです。"));

  0016e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1EG@IDKJCHCJ@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@
  00173	eb 15		 jmp	 SHORT $L108951
$L108939:

; 80   : 			MML->Err(_T("ブロックの終端を示す`}'がありません。"));

  00175	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CK@NIHEMDFE@0?V0?m0?C0?$KP0n?$HNBz?o0?$JCy?30Y?$AA?$GA?$AA?$HN?$AA?80L0B0?$IK0?$HO0?$FL0?$JD0?$AC@
  0017a	eb 10		 jmp	 SHORT $L108952
$L108940:

; 94   : 					MML->Err(_T("FDSMの波形パターンは0〜7の範囲で指定して下さい。"));

  0017c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1DI@HLDMHNAJ@?$AAF?$AAD?$AAS?$AAM0nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA70n?$HL?DV?r0gc?$AH@
  00181	eb 07		 jmp	 SHORT $L108951
$L108950:

; 111  : 	}
; 112  : 	if(ptFDSM > 32){

  00183	76 0c		 jbe	 SHORT $L23970

; 113  : 		MML->Err(_T("波形パターンは32個の数字を記述してください。32個を超えています。"));

  00185	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1EG@BOLFLOBH@l?b_b0?Q0?$LP0?$PM0?s0o?$AA3?$AA2P?$AL0nep?$FLW0?$JC?$IK?$BI?$IP?p0W0f0O0?$GA@
$L108951:
  0018a	8b c7		 mov	 eax, edi
$L108952:
  0018c	e8 00 00 00 00	 call	 ?Err@MMLfile@@QAEXQBG@Z	; MMLfile::Err
$L108954:
$L23970:

; 114  : 	}
; 115  : 	i = 0;

  00191	33 ff		 xor	 edi, edi

; 116  : 	while(ptFDSM>0){

  00193	85 f6		 test	 esi, esi
  00195	76 1f		 jbe	 SHORT $L23974
$L23973:

; 117  : 		code.append((char)1, WAVE[i]);

  00197	83 7d ec 10	 cmp	 DWORD PTR _WAVE$[ebp+24], 16 ; 00000010H
  0019b	8b 45 d8	 mov	 eax, DWORD PTR _WAVE$[ebp+4]
  0019e	73 03		 jae	 SHORT $L108904
  001a0	8d 45 d8	 lea	 eax, DWORD PTR _WAVE$[ebp+4]
$L108904:
  001a3	0f be 04 38	 movsx	 eax, BYTE PTR [eax+edi]
  001a7	50		 push	 eax
  001a8	6a 01		 push	 1
  001aa	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  001ad	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 118  : 		i++;

  001b2	47		 inc	 edi
  001b3	4e		 dec	 esi
  001b4	75 e1		 jne	 SHORT $L23973
$L23974:

; 119  : 		ptFDSM--;
; 120  : 	}
; 121  : 
; 122  : 
; 123  : 	iSize = code.size();

  001b6	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]

; 124  : }

  001b9	6a 00		 push	 0
  001bb	6a 01		 push	 1
  001bd	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  001c0	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  001c3	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  001c8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001cb	5f		 pop	 edi
  001cc	5e		 pop	 esi
  001cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001d4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d7	8b c3		 mov	 eax, ebx
  001d9	5b		 pop	 ebx
  001da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001df	c9		 leave
  001e0	c2 08 00	 ret	 8
$L108947:
$L108802:
  00ba1	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00ba4	e9 00 00 00 00	 jmp	 ??1MusicItem@@QAE@XZ	; MusicItem::~MusicItem
$L108803:
  00ba9	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  00bac	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0FDSM@@QAE@PAVMMLfile@@IQBG@Z:
  00bb1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T108934
  00bb6	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
??0FDSM@@QAE@PAVMMLfile@@IQBG@Z ENDP			; FDSM::FDSM
; Function compile flags: /Ogsy
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocnum
;	COMDAT _$E3
text$yc	SEGMENT
_$E3	PROC NEAR					; COMDAT

; 806  : 		{	// initialize from _Locinfo object

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00007	c3		 ret	 0
_$E3	ENDP
END
