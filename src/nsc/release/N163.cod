; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\N163.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
;	COMDAT ??_C@_1DK@OFOBHPDN@?$AAn?$AA1?$AA6?$AA30nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA1?$AA50n?$HL?DV?r0g@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CG@NLFDHIFD@0?$LF0?s0?W0?k?$JFw0L?$AA2?$AA5?$AA6P?$AL0?$JC?$IN?$IK0H0f0D0?$HO0Y0?$AC?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1CI@LDDBAFGC@0?$LF0?s0?W0?k?$JFw0o?$AA40nP?$ANep0g?$IK?$BI?$IP?p0W0fN?$AL0U0D0?$AC?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E3
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT ?Command@?1???0N163@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7N163@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1DK@OFOBHPDN@?$AAn?$AA1?$AA6?$AA30nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA1?$AA50n?$HL?DV?r0g@ ; `string'
PUBLIC	??_C@_1CG@NLFDHIFD@0?$LF0?s0?W0?k?$JFw0L?$AA2?$AA5?$AA6P?$AL0?$JC?$IN?$IK0H0f0D0?$HO0Y0?$AC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@LDDBAFGC@0?$LF0?s0?W0?k?$JFw0o?$AA40nP?$ANep0g?$IK?$BI?$IP?p0W0fN?$AL0U0D0?$AC?$AA?$AA@ ; `string'
PUBLIC	?getAsm@N163@@UAEXPAVMusicFile@@@Z		; N163::getAsm
PUBLIC	??_7N163@@6B@					; N163::`vftable'
;	COMDAT ?Command@?1???0N163@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B
CONST	SEGMENT
?Command@?1???0N163@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B DD FLAT:??_C@_01FGNFDNOH@?$CF?$AA@ ; `N163::N163'::`2'::Command
	DD	00H
	DD	FLAT:??_C@_01EPMOAMKG@$?$AA@
	DD	00H
	DD	FLAT:??_C@_01GBGANLPD@0?$AA@
	DD	00H
	DD	FLAT:??_C@_01HIHLOKLC@1?$AA@
	DD	00H
	DD	FLAT:??_C@_01FDFGLJHB@2?$AA@
	DD	00H
	DD	FLAT:??_C@_01EKENIIDA@3?$AA@
	DD	00H
	DD	FLAT:??_C@_01FAMBOPH@4?$AA@
	DD	00H
	DD	FLAT:??_C@_01BMBHCPLG@5?$AA@
	DD	00H
	DD	FLAT:??_C@_01DHDKHMHF@6?$AA@
	DD	00H
	DD	FLAT:??_C@_01COCBENDE@7?$AA@
	DD	00H
	DD	FLAT:??_C@_01KJLJFBPL@8?$AA@
	DD	00H
	DD	FLAT:??_C@_01LAKCGALK@9?$AA@
	DD	00H
	DD	FLAT:??_C@_01IHBHIGKO@?0?$AA@
	DD	01H
CONST	ENDS
;	COMDAT ??_C@_1DK@OFOBHPDN@?$AAn?$AA1?$AA6?$AA30nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA1?$AA50n?$HL?DV?r0g@
CONST	SEGMENT
??_C@_1DK@OFOBHPDN@?$AAn?$AA1?$AA6?$AA30nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA1?$AA50n?$HL?DV?r0g@ DB 'n'
	DB	00H, '1', 00H, '6', 00H, '3', 00H, 'n0', 0e2H, 'lb_', 0d1H, '0'
	DB	0bfH, '0', 0fcH, '0', 0f3H, '0o00', 00H, '^', 0ffH, '1', 00H, '5'
	DB	00H, 'n0', 0c4H, '{', 0f2H, 'Vg0', 07H, 'c', 09aH, '[W0f0', 0bH
	DB	'NU0D0', 02H, '0', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@NLFDHIFD@0?$LF0?s0?W0?k?$JFw0L?$AA2?$AA5?$AA6P?$AL0?$JC?$IN?$IK0H0f0D0?$HO0Y0?$AC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@NLFDHIFD@0?$LF0?s0?W0?k?$JFw0L?$AA2?$AA5?$AA6P?$AL0?$JC?$IN?$IK0H0f0D0?$HO0Y0?$AC?$AA?$AA@ DB 0b5H
	DB	'0', 0f3H, '0', 0d7H, '0', 0ebH, '0w', 095H, 'L02', 00H, '5', 00H
	DB	'6', 00H, 0bH, 'P', 092H, '0', 08aH, 08dH, 'H0f0D0~0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@LDDBAFGC@0?$LF0?s0?W0?k?$JFw0o?$AA40nP?$ANep0g?$IK?$BI?$IP?p0W0fN?$AL0U0D0?$AC?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LDDBAFGC@0?$LF0?s0?W0?k?$JFw0o?$AA40nP?$ANep0g?$IK?$BI?$IP?p0W0fN?$AL0U0D0?$AC?$AA?$AA@ DB 0b5H
	DB	'0', 0f3H, '0', 0d7H, '0', 0ebH, '0w', 095H, 'o04', 00H, 'n0', 0dH
	DB	'Ppeg0', 018H, 08aH, 0f0H, 08fH, 'W0f0', 0bH, 'NU0D0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_7N163@@6B@
CONST	SEGMENT
??_7N163@@6B@ DD FLAT:?getCode@MusicItem@@UAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; N163::`vftable'
	DD	FLAT:?setCode@MusicItem@@UAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?getAsm@N163@@UAEXPAVMusicFile@@@Z
; Function compile flags: /Ogsy
; File f:\nes\nsdl\src\nsc\n163.cpp
_TEXT	SEGMENT
_MUS$ = 8						; size = 4
?getAsm@N163@@UAEXPAVMusicFile@@@Z PROC NEAR		; N163::getAsm
; _this$ = ecx

; 148  : {

  00000	56		 push	 esi

; 149  : 	*MUS << MUS->Header.Label.c_str() << "N163" << m_id << ":" << endl;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _MUS$[esp]
  00005	8d 86 a8 00 00
	00		 lea	 eax, DWORD PTR [esi+168]
  0000b	83 78 18 10	 cmp	 DWORD PTR [eax+24], 16	; 00000010H
  0000f	57		 push	 edi
  00010	8b f9		 mov	 edi, ecx
  00012	72 05		 jb	 SHORT $L69765
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	eb 03		 jmp	 SHORT $L69766
$L69765:
  00019	83 c0 04	 add	 eax, 4
$L69766:
  0001c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01JLIPDDHJ@?3?$AA@
  00021	ff 77 3c	 push	 DWORD PTR [edi+60]
  00024	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04ECAEINBM@N163?$AA@
  0002c	50		 push	 eax
  0002d	8b c6		 mov	 eax, esi
  0002f	f7 d8		 neg	 eax
  00031	1b c0		 sbb	 eax, eax
  00033	23 c1		 and	 eax, ecx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00043	59		 pop	 ecx
  00044	59		 pop	 ecx
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z ; std::endl
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 150  : 	MusicItem::getAsm(MUS);

  0005a	56		 push	 esi
  0005b	8b cf		 mov	 ecx, edi
  0005d	e8 00 00 00 00	 call	 ?getAsm@MusicItem@@UAEXPAVMusicFile@@@Z ; MusicItem::getAsm
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 151  : }

  00064	c2 04 00	 ret	 4
?getAsm@N163@@UAEXPAVMusicFile@@@Z ENDP			; N163::getAsm
PUBLIC	??1N163@@QAE@XZ					; N163::~N163
; Function compile flags: /Ogsy
_TEXT	SEGMENT
??1N163@@QAE@XZ PROC NEAR				; N163::~N163
; _this$ = ecx

; 137  : {

  00067	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7N163@@6B@

; 138  : }

  0006d	e9 00 00 00 00	 jmp	 ??1MusicItem@@QAE@XZ	; MusicItem::~MusicItem
??1N163@@QAE@XZ ENDP					; N163::~N163
PUBLIC	??0N163@@QAE@PAVMMLfile@@IQBG@Z			; N163::N163
$T107603 DD	0ffffffffH
	DD	FLAT:$L107457
	DD	00H
	DD	FLAT:$L107458
$T107583 DD	019930520H
	DD	02H
	DD	FLAT:$T107603
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogsy
_TEXT	SEGMENT
_WAVE$ = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_this$ = 8						; size = 4
_ptN163$ = 12						; size = 4
__strName$ = 12						; size = 4
??0N163@@QAE@PAVMMLfile@@IQBG@Z PROC NEAR		; N163::N163
; _MML$ = edx
; __id$ = ecx

; 26   : {

  00072	b8 00 00 00 00	 mov	 eax, __ehhandler$??0N163@@QAE@PAVMMLfile@@IQBG@Z
  00077	e8 00 00 00 00	 call	 __EH_prolog
  0007c	83 ec 20	 sub	 esp, 32			; 00000020H
  0007f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00084	53		 push	 ebx
  00085	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  00088	56		 push	 esi
  00089	57		 push	 edi
  0008a	ff 75 0c	 push	 DWORD PTR __strName$[ebp]
  0008d	8b f1		 mov	 esi, ecx
  0008f	56		 push	 esi
  00090	53		 push	 ebx
  00091	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00094	8b fa		 mov	 edi, edx
  00096	e8 00 00 00 00	 call	 ??0MusicItem@@QAE@HQBG@Z ; MusicItem::MusicItem
  0009b	33 c0		 xor	 eax, eax
  0009d	89 45 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], eax

; 27   : 	//----------------------
; 28   : 	//Local変数
; 29   : 
; 30   : 
; 31   : //	定数定義
; 32   : enum	Command_ID_mml {
; 33   : 	N163_Num,
; 34   : 	N163_Commma
; 35   : };
; 36   : 
; 37   : //	これらは、MML構文で使えるコマンド。
; 38   : const	static	Command_Info	Command[] = {
; 39   : 		{	"%",	N163_Num	},
; 40   : 		{	"$",	N163_Num	},
; 41   : 		{	"0",	N163_Num	},
; 42   : 		{	"1",	N163_Num	},
; 43   : 		{	"2",	N163_Num	},
; 44   : 		{	"3",	N163_Num	},
; 45   : 		{	"4",	N163_Num	},
; 46   : 		{	"5",	N163_Num	},
; 47   : 		{	"6",	N163_Num	},
; 48   : 		{	"7",	N163_Num	},
; 49   : 		{	"8",	N163_Num	},
; 50   : 		{	"9",	N163_Num	},
; 51   : 		{	",",	N163_Commma	}
; 52   : };
; 53   : 
; 54   : 				int		i;
; 55   : 	unsigned	char	cData;
; 56   : 	unsigned	int		ptN163		= 0;
; 57   : 				string	WAVE;

  000a0	50		 push	 eax
  000a1	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  000a4	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET FLAT:??_7N163@@6B@
  000aa	89 73 3c	 mov	 DWORD PTR [ebx+60], esi
  000ad	89 45 0c	 mov	 DWORD PTR _ptN163$[ebp], eax
  000b0	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _WAVE$[ebp+24], 15 ; 0000000fH
  000b7	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 58   : 
; 59   : 	//------------------------------
; 60   : 	//クラスの初期設定
; 61   : 	WAVE.clear();

  000bc	8d 45 d4	 lea	 eax, DWORD PTR _WAVE$[ebp]
  000bf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000c3	e8 00 00 00 00	 call	 ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear

; 62   : 
; 63   : 	//------------------------------
; 64   : 	//コンパイル
; 65   : 
; 66   : 	// { の検索
; 67   : 	while(MML->cRead() != '{'){

  000c8	eb 0f		 jmp	 SHORT $L107598
$L23945:

; 68   : 		if(MML->eof()){

  000ca	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000cd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cf	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000d2	f6 44 01 08 01	 test	 BYTE PTR [ecx+eax+8], 1
  000d7	75 57		 jne	 SHORT $L107587
$L107598:

; 62   : 
; 63   : 	//------------------------------
; 64   : 	//コンパイル
; 65   : 
; 66   : 	// { の検索
; 67   : 	while(MML->cRead() != '{'){

  000d9	8b f7		 mov	 esi, edi
  000db	e8 00 00 00 00	 call	 ?cRead@MMLfile@@QAEDXZ	; MMLfile::cRead
  000e0	3c 7b		 cmp	 al, 123			; 0000007bH
  000e2	75 e6		 jne	 SHORT $L23945

; 70   : 		}
; 71   : 	}
; 72   : 
; 73   : 	code.resize(0);

  000e4	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  000e7	6a 00		 push	 0
  000e9	33 c0		 xor	 eax, eax
  000eb	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 74   : 
; 75   : 	// } が来るまで、記述ブロック内をコンパイルする。
; 76   : 	while((cData = MML->GetChar()) != '}'){

  000f0	e8 00 00 00 00	 call	 ?GetChar@MMLfile@@QAEDXZ ; MMLfile::GetChar
  000f5	3c 7d		 cmp	 al, 125			; 0000007dH
  000f7	0f 84 8b 00 00
	00		 je	 $L107593
$L23950:

; 77   : 		
; 78   : 		// } が来る前に、[EOF]が来たらエラー
; 79   : 		if( MML->eof() ){

  000fd	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00100	8b 08		 mov	 ecx, DWORD PTR [eax]
  00102	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00105	f6 44 01 08 01	 test	 BYTE PTR [ecx+eax+8], 1

; 81   : 		}
; 82   : 
; 83   : 		//１つ戻る
; 84   : 		MML->Back();

  0010a	8b c7		 mov	 eax, edi
  0010c	75 6c		 jne	 SHORT $L107588
  0010e	e8 00 00 00 00	 call	 ?Back@MMLfile@@QAEXXZ	; MMLfile::Back

; 85   : 
; 86   : 
; 87   : 		//各コマンド毎の処理
; 88   : 		switch(MML->GetCommandID(Command, sizeof(Command)/sizeof(Command_Info))){

  00113	6a 0d		 push	 13			; 0000000dH
  00115	68 00 00 00 00	 push	 OFFSET FLAT:?Command@?1???0N163@@QAE@PAVMMLfile@@IQBG@Z@4QBUCommand_Info@@B
  0011a	8b c7		 mov	 eax, edi
  0011c	e8 00 00 00 00	 call	 ?GetCommandID@MMLfile@@QAEHQBUCommand_Info@@I@Z ; MMLfile::GetCommandID
  00121	83 e8 00	 sub	 eax, 0
  00124	74 11		 je	 SHORT $L23959
  00126	48		 dec	 eax
  00127	74 38		 je	 SHORT $L23956

; 98   : 				break;
; 99   : 
; 100  : 			case(N163_Commma):
; 101  : 				break;
; 102  : 
; 103  : 			//unknown command
; 104  : 			default:
; 105  : 				MML->Err(_T("unknown command"));

  00129	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CA@BFMKMMBP@?$AAu?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?$AA@
  0012e	eb 63		 jmp	 SHORT $L107601
$L107587:

; 69   : 			MML->Err(_T("ブロックの開始を示す{が見つかりません。"));

  00130	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CK@CKPPJBGB@0?V0?m0?C0?$KP0n?$JF?$ILY?K0?$JCy?30Y?$AA?$HL0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0?$AC@
  00135	eb 5c		 jmp	 SHORT $L107601
$L23959:

; 89   : 
; 90   : 			case(N163_Num):
; 91   : 				MML->Back();

  00137	8b c7		 mov	 eax, edi
  00139	e8 00 00 00 00	 call	 ?Back@MMLfile@@QAEXXZ	; MMLfile::Back

; 92   : 				i = MML->GetInt();

  0013e	8b c7		 mov	 eax, edi
  00140	e8 00 00 00 00	 call	 ?GetInt@MMLfile@@QAEHXZ	; MMLfile::GetInt

; 93   : 				if( (i<0) || (i>15)){

  00145	85 c0		 test	 eax, eax
  00147	7c 38		 jl	 SHORT $L107589
  00149	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  0014c	7f 33		 jg	 SHORT $L107589

; 95   : 				}
; 96   : 				WAVE.append((char)1, (char)i & 0x0F);

  0014e	25 0f ff ff ff	 and	 eax, -241		; ffffff0fH
  00153	50		 push	 eax
  00154	6a 01		 push	 1
  00156	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  00159	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 97   : 				ptN163++;

  0015e	ff 45 0c	 inc	 DWORD PTR _ptN163$[ebp]
$L23956:
  00161	e8 00 00 00 00	 call	 ?GetChar@MMLfile@@QAEDXZ ; MMLfile::GetChar
  00166	3c 7d		 cmp	 al, 125			; 0000007dH
  00168	75 93		 jne	 SHORT $L23950

; 106  : 				break;
; 107  : 		}
; 108  : 	}
; 109  : 	if(ptN163 > 256){

  0016a	81 7d 0c 00 01
	00 00		 cmp	 DWORD PTR _ptN163$[ebp], 256 ; 00000100H
  00171	76 15		 jbe	 SHORT $L107593

; 110  : 		MML->Err(_T("サンプル長が256個を越えています。"));

  00173	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CG@NLFDHIFD@0?$LF0?s0?W0?k?$JFw0L?$AA2?$AA5?$AA6P?$AL0?$JC?$IN?$IK0H0f0D0?$HO0Y0?$AC?$AA?$AA@
  00178	eb 19		 jmp	 SHORT $L107601
$L107588:

; 80   : 			MML->Err(_T("ブロックの終端を示す`}'がありません。"));

  0017a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CK@NIHEMDFE@0?V0?m0?C0?$KP0n?$HNBz?o0?$JCy?30Y?$AA?$GA?$AA?$HN?$AA?80L0B0?$IK0?$HO0?$FL0?$JD0?$AC@
  0017f	eb 14		 jmp	 SHORT $L107602
$L107589:

; 94   : 					MML->Err(_T("n163の波形パターンは0〜15の範囲で指定して下さい。"));

  00181	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1DK@OFOBHPDN@?$AAn?$AA1?$AA6?$AA30nl?b_b0?Q0?$LP0?$PM0?s0o?$AA0?$PP?$FO?$AA1?$AA50n?$HL?DV?r0g@
  00186	eb 0b		 jmp	 SHORT $L107601
$L107593:

; 111  : 	}
; 112  : 	if((ptN163 & 0x03) != 0){

  00188	f6 45 0c 03	 test	 BYTE PTR _ptN163$[ebp], 3
  0018c	74 0c		 je	 SHORT $L23970

; 113  : 		MML->Err(_T("サンプル長は4の倍数で記述して下さい。"));

  0018e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_1CI@LDDBAFGC@0?$LF0?s0?W0?k?$JFw0o?$AA40nP?$ANep0g?$IK?$BI?$IP?p0W0fN?$AL0U0D0?$AC?$AA?$AA@
$L107601:
  00193	8b c7		 mov	 eax, edi
$L107602:
  00195	e8 00 00 00 00	 call	 ?Err@MMLfile@@QAEXQBG@Z	; MMLfile::Err
$L107604:
$L23970:

; 114  : 	}
; 115  : 	ptN163 >>= 1;

  0019a	d1 6d 0c	 shr	 DWORD PTR _ptN163$[ebp], 1

; 116  : 	code.append((char)1, (unsigned char)ptN163);

  0019d	ff 75 0c	 push	 DWORD PTR _ptN163$[ebp]
  001a0	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  001a3	6a 01		 push	 1
  001a5	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 117  : 	i = 0;
; 118  : 	while(ptN163>0){

  001aa	8b 75 0c	 mov	 esi, DWORD PTR _ptN163$[ebp]
  001ad	85 f6		 test	 esi, esi
  001af	76 2d		 jbe	 SHORT $L23976

; 114  : 	}
; 115  : 	ptN163 >>= 1;

  001b1	33 ff		 xor	 edi, edi
$L23975:

; 119  : 		code.append((char)1, WAVE[i*2+0] | (WAVE[i*2+1]<<4) );

  001b3	83 7d ec 10	 cmp	 DWORD PTR _WAVE$[ebp+24], 16 ; 00000010H
  001b7	8b 45 d8	 mov	 eax, DWORD PTR _WAVE$[ebp+4]
  001ba	8b c8		 mov	 ecx, eax
  001bc	73 05		 jae	 SHORT $L107572
  001be	8d 4d d8	 lea	 ecx, DWORD PTR _WAVE$[ebp+4]
  001c1	8b c1		 mov	 eax, ecx
$L107572:
  001c3	0f be 44 07 01	 movsx	 eax, BYTE PTR [edi+eax+1]
  001c8	c0 e0 04	 shl	 al, 4
  001cb	0a 04 0f	 or	 al, BYTE PTR [edi+ecx]
  001ce	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
  001d1	50		 push	 eax
  001d2	6a 01		 push	 1
  001d4	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 120  : 		i++;

  001d9	47		 inc	 edi
  001da	47		 inc	 edi
  001db	4e		 dec	 esi
  001dc	75 d5		 jne	 SHORT $L23975
$L23976:

; 121  : 		ptN163--;
; 122  : 	}
; 123  : 
; 124  : 
; 125  : 	iSize = code.size();

  001de	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]

; 126  : }

  001e1	6a 00		 push	 0
  001e3	6a 01		 push	 1
  001e5	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  001e8	89 43 30	 mov	 DWORD PTR [ebx+48], eax
  001eb	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  001f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f3	5f		 pop	 edi
  001f4	5e		 pop	 esi
  001f5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001fc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ff	8b c3		 mov	 eax, ebx
  00201	5b		 pop	 ebx
  00202	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00207	c9		 leave
  00208	c2 08 00	 ret	 8
$L107596:
$L107457:
  00b09	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00b0c	e9 00 00 00 00	 jmp	 ??1MusicItem@@QAE@XZ	; MusicItem::~MusicItem
$L107458:
  00b11	8d 4d d4	 lea	 ecx, DWORD PTR _WAVE$[ebp]
  00b14	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0N163@@QAE@PAVMMLfile@@IQBG@Z:
  00b19	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T107583
  00b1e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
??0N163@@QAE@PAVMMLfile@@IQBG@Z ENDP			; N163::N163
; Function compile flags: /Ogsy
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xlocnum
;	COMDAT _$E3
text$yc	SEGMENT
_$E3	PROC NEAR					; COMDAT

; 806  : 		{	// initialize from _Locinfo object

  00000	83 25 00 00 00
	00 00		 and	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, 0 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00007	c3		 ret	 0
_$E3	ENDP
END
